{"ast":null,"code":"var _jsxFileName = \"/home/insultados/my-app/src/components/feed/FeedContainer.jsx\";\nimport React from \"react\";\nimport FeedPost from \"./FeedPost\";\nimport classes from './FeedContainer.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = \"http://127.0.0.1:5000\";\n\n// Пример отправки POST запроса:\nasync function postData() {\n  let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    cache: 'no-cache',\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin',\n    // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n\n    redirect: 'follow',\n    // manual, *follow, error\n    referrerPolicy: 'no-referrer',\n    // no-referrer, *client\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n\n  return await response.json(); // parses JSON response into native JavaScript objects\n}\n\npostData('https://example.com/answer', {\n  answer: 42\n}).then(data => {\n  console.log(data); // JSON data parsed by `response.json()` call\n});\n\nlet response = null;\ntry {\n  response = postData('https://example.com/answer', {\n    answer: 42\n  }).then(data => {\n    console.log(data); // JSON data parsed by `response.json()` call\n  });\n} catch {\n  console.log('Server requeet error');\n}\nconst renderFeedContainerContent = response => {\n  if (response != null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.feed_container_content,\n      children: response['posts'].map((e, index) => /*#__PURE__*/_jsxDEV(FeedPost, {\n        post: e,\n        post_img: response['img'][index],\n        post_num: response['posts'].indexOf(e)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.feed_container_content,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"SERVER RESPONSE ERROR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n};\nconst FeedContainer = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.feed_container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.feed_container_header,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u041F\\u041E\\u0421\\u041B\\u0415\\u0414\\u041D\\u0418\\u0415 \\u041D\\u041E\\u0412\\u041E\\u0421\\u0422\\u0415\\u0419\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), renderFeedContainerContent(response)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_c = FeedContainer;\nexport default FeedContainer;\nvar _c;\n$RefreshReg$(_c, \"FeedContainer\");","map":{"version":3,"names":["React","FeedPost","classes","jsxDEV","_jsxDEV","url","postData","arguments","length","undefined","data","response","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","json","answer","then","console","log","renderFeedContainerContent","className","feed_container_content","children","map","e","index","post","post_img","post_num","indexOf","fileName","_jsxFileName","lineNumber","columnNumber","FeedContainer","feed_container","feed_container_header","_c","$RefreshReg$"],"sources":["/home/insultados/my-app/src/components/feed/FeedContainer.jsx"],"sourcesContent":["import React from \"react\";\nimport FeedPost from \"./FeedPost\";\nimport classes from './FeedContainer.module.css'\n\n\nconst url = \"http://127.0.0.1:5000\"\n\n// Пример отправки POST запроса:\nasync function postData(url = '', data = {}) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin', // include, *same-origin, omit\n        headers: {\n            'Content-Type': 'application/json'\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        redirect: 'follow', // manual, *follow, error\n        referrerPolicy: 'no-referrer', // no-referrer, *client\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return await response.json(); // parses JSON response into native JavaScript objects\n}\n\npostData('https://example.com/answer', { answer: 42 })\n    .then((data) => {\n        console.log(data); // JSON data parsed by `response.json()` call\n    });\n\n\n\nlet response = null;\ntry {\n    response = postData('https://example.com/answer', { answer: 42 })\n        .then((data) => {\n            console.log(data); // JSON data parsed by `response.json()` call\n        });\n}\ncatch {\n    console.log('Server requeet error')\n}\n\nconst renderFeedContainerContent = (response) => {\n    if (response != null) {\n        return (\n            <div className={classes.feed_container_content}>\n                {response['posts'].map((e, index) => (\n                    <FeedPost key={index} post={e} post_img={response['img'][index]} post_num={response['posts'].indexOf(e)} />\n                ))}\n            </div>)\n    }\n    else {\n        return (\n            <div className={classes.feed_container_content}>\n                <p>SERVER RESPONSE ERROR</p>\n            </div>)\n    }\n}\n\nconst FeedContainer = () => {\n\n\n    return (\n        <div className={classes.feed_container}>\n            <div className={classes.feed_container_header}>\n                <p>ПОСЛЕДНИЕ НОВОСТЕЙ</p>\n            </div>\n            {renderFeedContainerContent(response)}\n        </div>\n    )\n}\n\nexport default FeedContainer;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,OAAO,MAAM,4BAA4B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGhD,MAAMC,GAAG,GAAG,uBAAuB;;AAEnC;AACA,eAAeC,QAAQA,CAAA,EAAsB;EAAA,IAArBD,GAAG,GAAAE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,IAAI,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACvC;EACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAE;IAC9BQ,MAAM,EAAE,MAAM;IAAE;IAChBC,IAAI,EAAE,MAAM;IAAE;IACdC,KAAK,EAAE,UAAU;IAAE;IACnBC,WAAW,EAAE,aAAa;IAAE;IAC5BC,OAAO,EAAE;MACL,cAAc,EAAE;MAChB;IACJ,CAAC;;IACDC,QAAQ,EAAE,QAAQ;IAAE;IACpBC,cAAc,EAAE,aAAa;IAAE;IAC/BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,IAAI,CAAC,CAAC;EAC/B,CAAC,CAAC;;EACF,OAAO,MAAMC,QAAQ,CAACY,IAAI,EAAE,CAAC,CAAC;AAClC;;AAEAjB,QAAQ,CAAC,4BAA4B,EAAE;EAAEkB,MAAM,EAAE;AAAG,CAAC,CAAC,CACjDC,IAAI,CAAEf,IAAI,IAAK;EACZgB,OAAO,CAACC,GAAG,CAACjB,IAAI,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC;;AAIN,IAAIC,QAAQ,GAAG,IAAI;AACnB,IAAI;EACAA,QAAQ,GAAGL,QAAQ,CAAC,4BAA4B,EAAE;IAAEkB,MAAM,EAAE;EAAG,CAAC,CAAC,CAC5DC,IAAI,CAAEf,IAAI,IAAK;IACZgB,OAAO,CAACC,GAAG,CAACjB,IAAI,CAAC,CAAC,CAAC;EACvB,CAAC,CAAC;AACV,CAAC,CACD,MAAM;EACFgB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;AACvC;AAEA,MAAMC,0BAA0B,GAAIjB,QAAQ,IAAK;EAC7C,IAAIA,QAAQ,IAAI,IAAI,EAAE;IAClB,oBACIP,OAAA;MAAKyB,SAAS,EAAE3B,OAAO,CAAC4B,sBAAuB;MAAAC,QAAA,EAC1CpB,QAAQ,CAAC,OAAO,CAAC,CAACqB,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,kBAC5B9B,OAAA,CAACH,QAAQ;QAAakC,IAAI,EAAEF,CAAE;QAACG,QAAQ,EAAEzB,QAAQ,CAAC,KAAK,CAAC,CAACuB,KAAK,CAAE;QAACG,QAAQ,EAAE1B,QAAQ,CAAC,OAAO,CAAC,CAAC2B,OAAO,CAACL,CAAC;MAAE,GAAzFC,KAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA;EACd,CAAC,MACI;IACD,oBACItC,OAAA;MAAKyB,SAAS,EAAE3B,OAAO,CAAC4B,sBAAuB;MAAAC,QAAA,eAC3C3B,OAAA;QAAA2B,QAAA,EAAG;MAAqB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC1B;EACd;AACJ,CAAC;AAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAGxB,oBACIvC,OAAA;IAAKyB,SAAS,EAAE3B,OAAO,CAAC0C,cAAe;IAAAb,QAAA,gBACnC3B,OAAA;MAAKyB,SAAS,EAAE3B,OAAO,CAAC2C,qBAAsB;MAAAd,QAAA,eAC1C3B,OAAA;QAAA2B,QAAA,EAAG;MAAkB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACvB,EACLd,0BAA0B,CAACjB,QAAQ,CAAC;EAAA;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACnC;AAEd,CAAC;AAAAI,EAAA,GAXKH,aAAa;AAanB,eAAeA,aAAa;AAAC,IAAAG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}