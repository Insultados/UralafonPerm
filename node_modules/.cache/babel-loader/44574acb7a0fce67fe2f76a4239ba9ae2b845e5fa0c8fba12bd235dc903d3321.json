{"ast":null,"code":"// @ts-check\n// Import types\n/** @typedef {import(\"./typings\").HtmlTagObject} HtmlTagObject */\n/** @typedef {import(\"./typings\").Options} HtmlWebpackOptions */\n/** @typedef {import(\"./typings\").ProcessedOptions} ProcessedHtmlWebpackOptions */\n/** @typedef {import(\"./typings\").TemplateParameter} TemplateParameter */\n/** @typedef {import(\"webpack/lib/Compiler.js\")} WebpackCompiler */\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n'use strict';\n\nconst promisify = require('util').promisify;\nconst vm = require('vm');\nconst fs = require('fs');\nconst _ = require('lodash');\nconst path = require('path');\nconst {\n  CachedChildCompilation\n} = require('./lib/cached-child-compiler');\nconst {\n  createHtmlTagObject,\n  htmlTagObjectToString,\n  HtmlTagArray\n} = require('./lib/html-tags');\nconst prettyError = require('./lib/errors.js');\nconst chunkSorter = require('./lib/chunksorter.js');\nconst getHtmlWebpackPluginHooks = require('./lib/hooks.js').getHtmlWebpackPluginHooks;\nconst {\n  assert\n} = require('console');\nconst fsReadFileAsync = promisify(fs.readFile);\nclass HtmlWebpackPlugin {\n  /**\n   * @param {HtmlWebpackOptions} [options]\n   */\n  constructor(options) {\n    /** @type {HtmlWebpackOptions} */\n    this.userOptions = options || {};\n    this.version = HtmlWebpackPlugin.version;\n  }\n  apply(compiler) {\n    // Wait for configuration preset plugions to apply all configure webpack defaults\n    compiler.hooks.initialize.tap('HtmlWebpackPlugin', () => {\n      const userOptions = this.userOptions;\n\n      // Default options\n      /** @type {ProcessedHtmlWebpackOptions} */\n      const defaultOptions = {\n        template: 'auto',\n        templateContent: false,\n        templateParameters: templateParametersGenerator,\n        filename: 'index.html',\n        publicPath: userOptions.publicPath === undefined ? 'auto' : userOptions.publicPath,\n        hash: false,\n        inject: userOptions.scriptLoading === 'blocking' ? 'body' : 'head',\n        scriptLoading: 'defer',\n        compile: true,\n        favicon: false,\n        minify: 'auto',\n        cache: true,\n        showErrors: true,\n        chunks: 'all',\n        excludeChunks: [],\n        chunksSortMode: 'auto',\n        meta: {},\n        base: false,\n        title: 'Webpack App',\n        xhtml: false\n      };\n\n      /** @type {ProcessedHtmlWebpackOptions} */\n      const options = Object.assign(defaultOptions, userOptions);\n      this.options = options;\n\n      // Assert correct option spelling\n      assert(options.scriptLoading === 'defer' || options.scriptLoading === 'blocking' || options.scriptLoading === 'module', 'scriptLoading needs to be set to \"defer\", \"blocking\" or \"module\"');\n      assert(options.inject === true || options.inject === false || options.inject === 'head' || options.inject === 'body', 'inject needs to be set to true, false, \"head\" or \"body');\n\n      // Default metaOptions if no template is provided\n      if (!userOptions.template && options.templateContent === false && options.meta) {\n        const defaultMeta = {\n          // From https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag\n          viewport: 'width=device-width, initial-scale=1'\n        };\n        options.meta = Object.assign({}, options.meta, defaultMeta, userOptions.meta);\n      }\n\n      // entryName to fileName conversion function\n      const userOptionFilename = userOptions.filename || defaultOptions.filename;\n      const filenameFunction = typeof userOptionFilename === 'function' ? userOptionFilename\n      // Replace '[name]' with entry name\n      : entryName => userOptionFilename.replace(/\\[name\\]/g, entryName);\n\n      /** output filenames for the given entry names */\n      const entryNames = Object.keys(compiler.options.entry);\n      const outputFileNames = new Set((entryNames.length ? entryNames : ['main']).map(filenameFunction));\n\n      /** Option for every entry point */\n      const entryOptions = Array.from(outputFileNames).map(filename => ({\n        ...options,\n        filename\n      }));\n\n      // Hook all options into the webpack compiler\n      entryOptions.forEach(instanceOptions => {\n        hookIntoCompiler(compiler, instanceOptions, this);\n      });\n    });\n  }\n\n  /**\n   * Once webpack is done with compiling the template into a NodeJS code this function\n   * evaluates it to generate the html result\n   *\n   * The evaluateCompilationResult is only a class function to allow spying during testing.\n   * Please change that in a further refactoring\n   *\n   * @param {string} source\n   * @param {string} templateFilename\n   * @returns {Promise<string | (() => string | Promise<string>)>}\n   */\n  evaluateCompilationResult(source, publicPath, templateFilename) {\n    if (!source) {\n      return Promise.reject(new Error('The child compilation didn\\'t provide a result'));\n    }\n    // The LibraryTemplatePlugin stores the template result in a local variable.\n    // By adding it to the end the value gets extracted during evaluation\n    if (source.indexOf('HTML_WEBPACK_PLUGIN_RESULT') >= 0) {\n      source += ';\\nHTML_WEBPACK_PLUGIN_RESULT';\n    }\n    const templateWithoutLoaders = templateFilename.replace(/^.+!/, '').replace(/\\?.+$/, '');\n    const vmContext = vm.createContext({\n      ...global,\n      HTML_WEBPACK_PLUGIN: true,\n      require: require,\n      htmlWebpackPluginPublicPath: publicPath,\n      URL: require('url').URL,\n      __filename: templateWithoutLoaders\n    });\n    const vmScript = new vm.Script(source, {\n      filename: templateWithoutLoaders\n    });\n    // Evaluate code and cast to string\n    let newSource;\n    try {\n      newSource = vmScript.runInContext(vmContext);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n    if (typeof newSource === 'object' && newSource.__esModule && newSource.default) {\n      newSource = newSource.default;\n    }\n    return typeof newSource === 'string' || typeof newSource === 'function' ? Promise.resolve(newSource) : Promise.reject(new Error('The loader \"' + templateWithoutLoaders + '\" didn\\'t return html.'));\n  }\n}\n\n/**\n * connect the html-webpack-plugin to the webpack compiler lifecycle hooks\n *\n * @param {import('webpack').Compiler} compiler\n * @param {ProcessedHtmlWebpackOptions} options\n * @param {HtmlWebpackPlugin} plugin\n */\nfunction hookIntoCompiler(compiler, options, plugin) {\n  const webpack = compiler.webpack;\n  // Instance variables to keep caching information\n  // for multiple builds\n  let assetJson;\n  /**\n   * store the previous generated asset to emit them even if the content did not change\n   * to support watch mode for third party plugins like the clean-webpack-plugin or the compression plugin\n   * @type {Array<{html: string, name: string}>}\n   */\n  let previousEmittedAssets = [];\n  options.template = getFullTemplatePath(options.template, compiler.context);\n\n  // Inject child compiler plugin\n  const childCompilerPlugin = new CachedChildCompilation(compiler);\n  if (!options.templateContent) {\n    childCompilerPlugin.addEntry(options.template);\n  }\n\n  // convert absolute filename into relative so that webpack can\n  // generate it at correct location\n  const filename = options.filename;\n  if (path.resolve(filename) === path.normalize(filename)) {\n    const outputPath = /** @type {string} - Once initialized the path is always a string */compiler.options.output.path;\n    options.filename = path.relative(outputPath, filename);\n  }\n\n  // Check if webpack is running in production mode\n  // @see https://github.com/webpack/webpack/blob/3366421f1784c449f415cda5930a8e445086f688/lib/WebpackOptionsDefaulter.js#L12-L14\n  const isProductionLikeMode = compiler.options.mode === 'production' || !compiler.options.mode;\n  const minify = options.minify;\n  if (minify === true || minify === 'auto' && isProductionLikeMode) {\n    /** @type { import('html-minifier-terser').Options } */\n    options.minify = {\n      // https://www.npmjs.com/package/html-minifier-terser#options-quick-reference\n      collapseWhitespace: true,\n      keepClosingSlash: true,\n      removeComments: true,\n      removeRedundantAttributes: true,\n      removeScriptTypeAttributes: true,\n      removeStyleLinkTypeAttributes: true,\n      useShortDoctype: true\n    };\n  }\n  compiler.hooks.thisCompilation.tap('HtmlWebpackPlugin',\n  /**\n     * Hook into the webpack compilation\n     * @param {WebpackCompilation} compilation\n    */\n  compilation => {\n    compilation.hooks.processAssets.tapAsync({\n      name: 'HtmlWebpackPlugin',\n      stage:\n      /**\n       * Generate the html after minification and dev tooling is done\n       */\n      webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_INLINE\n    },\n    /**\n     * Hook into the process assets hook\n     * @param {WebpackCompilation} compilationAssets\n     * @param {(err?: Error) => void} callback\n     */\n    (compilationAssets, callback) => {\n      // Get all entry point names for this html file\n      const entryNames = Array.from(compilation.entrypoints.keys());\n      const filteredEntryNames = filterChunks(entryNames, options.chunks, options.excludeChunks);\n      const sortedEntryNames = sortEntryChunks(filteredEntryNames, options.chunksSortMode, compilation);\n      const templateResult = options.templateContent ? {\n        mainCompilationHash: compilation.hash\n      } : childCompilerPlugin.getCompilationEntryResult(options.template);\n      if ('error' in templateResult) {\n        compilation.errors.push(prettyError(templateResult.error, compiler.context).toString());\n      }\n\n      // If the child compilation was not executed during a previous main compile run\n      // it is a cached result\n      const isCompilationCached = templateResult.mainCompilationHash !== compilation.hash;\n\n      /** The public path used inside the html file */\n      const htmlPublicPath = getPublicPath(compilation, options.filename, options.publicPath);\n\n      /** Generated file paths from the entry point names */\n      const assets = htmlWebpackPluginAssets(compilation, sortedEntryNames, htmlPublicPath);\n\n      // If the template and the assets did not change we don't have to emit the html\n      const newAssetJson = JSON.stringify(getAssetFiles(assets));\n      if (isCompilationCached && options.cache && assetJson === newAssetJson) {\n        previousEmittedAssets.forEach(_ref => {\n          let {\n            name,\n            html\n          } = _ref;\n          compilation.emitAsset(name, new webpack.sources.RawSource(html, false));\n        });\n        return callback();\n      } else {\n        previousEmittedAssets = [];\n        assetJson = newAssetJson;\n      }\n\n      // The html-webpack plugin uses a object representation for the html-tags which will be injected\n      // to allow altering them more easily\n      // Just before they are converted a third-party-plugin author might change the order and content\n      const assetsPromise = getFaviconPublicPath(options.favicon, compilation, assets.publicPath).then(faviconPath => {\n        assets.favicon = faviconPath;\n        return getHtmlWebpackPluginHooks(compilation).beforeAssetTagGeneration.promise({\n          assets: assets,\n          outputName: options.filename,\n          plugin: plugin\n        });\n      });\n\n      // Turn the js and css paths into grouped HtmlTagObjects\n      const assetTagGroupsPromise = assetsPromise\n      // And allow third-party-plugin authors to reorder and change the assetTags before they are grouped\n      .then(_ref2 => {\n        let {\n          assets\n        } = _ref2;\n        return getHtmlWebpackPluginHooks(compilation).alterAssetTags.promise({\n          assetTags: {\n            scripts: generatedScriptTags(assets.js),\n            styles: generateStyleTags(assets.css),\n            meta: [...generateBaseTag(options.base), ...generatedMetaTags(options.meta), ...generateFaviconTags(assets.favicon)]\n          },\n          outputName: options.filename,\n          publicPath: htmlPublicPath,\n          plugin: plugin\n        });\n      }).then(_ref3 => {\n        let {\n          assetTags\n        } = _ref3;\n        // Inject scripts to body unless it set explicitly to head\n        const scriptTarget = options.inject === 'head' || options.inject !== 'body' && options.scriptLoading !== 'blocking' ? 'head' : 'body';\n        // Group assets to `head` and `body` tag arrays\n        const assetGroups = generateAssetGroups(assetTags, scriptTarget);\n        // Allow third-party-plugin authors to reorder and change the assetTags once they are grouped\n        return getHtmlWebpackPluginHooks(compilation).alterAssetTagGroups.promise({\n          headTags: assetGroups.headTags,\n          bodyTags: assetGroups.bodyTags,\n          outputName: options.filename,\n          publicPath: htmlPublicPath,\n          plugin: plugin\n        });\n      });\n\n      // Turn the compiled template into a nodejs function or into a nodejs string\n      const templateEvaluationPromise = Promise.resolve().then(() => {\n        if ('error' in templateResult) {\n          return options.showErrors ? prettyError(templateResult.error, compiler.context).toHtml() : 'ERROR';\n        }\n        // Allow to use a custom function / string instead\n        if (options.templateContent !== false) {\n          return options.templateContent;\n        }\n        // Once everything is compiled evaluate the html factory\n        // and replace it with its content\n        return 'compiledEntry' in templateResult ? plugin.evaluateCompilationResult(templateResult.compiledEntry.content, htmlPublicPath, options.template) : Promise.reject(new Error('Child compilation contained no compiledEntry'));\n      });\n      const templateExectutionPromise = Promise.all([assetsPromise, assetTagGroupsPromise, templateEvaluationPromise])\n      // Execute the template\n      .then(_ref4 => {\n        let [assetsHookResult, assetTags, compilationResult] = _ref4;\n        return typeof compilationResult !== 'function' ? compilationResult : executeTemplate(compilationResult, assetsHookResult.assets, {\n          headTags: assetTags.headTags,\n          bodyTags: assetTags.bodyTags\n        }, compilation);\n      });\n      const injectedHtmlPromise = Promise.all([assetTagGroupsPromise, templateExectutionPromise])\n      // Allow plugins to change the html before assets are injected\n      .then(_ref5 => {\n        let [assetTags, html] = _ref5;\n        const pluginArgs = {\n          html,\n          headTags: assetTags.headTags,\n          bodyTags: assetTags.bodyTags,\n          plugin: plugin,\n          outputName: options.filename\n        };\n        return getHtmlWebpackPluginHooks(compilation).afterTemplateExecution.promise(pluginArgs);\n      }).then(_ref6 => {\n        let {\n          html,\n          headTags,\n          bodyTags\n        } = _ref6;\n        return postProcessHtml(html, assets, {\n          headTags,\n          bodyTags\n        });\n      });\n      const emitHtmlPromise = injectedHtmlPromise\n      // Allow plugins to change the html after assets are injected\n      .then(html => {\n        const pluginArgs = {\n          html,\n          plugin: plugin,\n          outputName: options.filename\n        };\n        return getHtmlWebpackPluginHooks(compilation).beforeEmit.promise(pluginArgs).then(result => result.html);\n      }).catch(err => {\n        // In case anything went wrong the promise is resolved\n        // with the error message and an error is logged\n        compilation.errors.push(prettyError(err, compiler.context).toString());\n        return options.showErrors ? prettyError(err, compiler.context).toHtml() : 'ERROR';\n      }).then(html => {\n        const filename = options.filename.replace(/\\[templatehash([^\\]]*)\\]/g, require('util').deprecate((match, options) => `[contenthash${options}]`, '[templatehash] is now [contenthash]'));\n        const replacedFilename = replacePlaceholdersInFilename(filename, html, compilation);\n        // Add the evaluated html code to the webpack assets\n        compilation.emitAsset(replacedFilename.path, new webpack.sources.RawSource(html, false), replacedFilename.info);\n        previousEmittedAssets.push({\n          name: replacedFilename.path,\n          html\n        });\n        return replacedFilename.path;\n      }).then(finalOutputName => getHtmlWebpackPluginHooks(compilation).afterEmit.promise({\n        outputName: finalOutputName,\n        plugin: plugin\n      }).catch(err => {\n        console.error(err);\n        return null;\n      }).then(() => null));\n\n      // Once all files are added to the webpack compilation\n      // let the webpack compiler continue\n      emitHtmlPromise.then(() => {\n        callback();\n      });\n    });\n  });\n\n  /**\n   * Generate the template parameters for the template function\n   * @param {WebpackCompilation} compilation\n   * @param {{\n      publicPath: string,\n      js: Array<string>,\n      css: Array<string>,\n      manifest?: string,\n      favicon?: string\n    }} assets\n   * @param {{\n       headTags: HtmlTagObject[],\n       bodyTags: HtmlTagObject[]\n     }} assetTags\n   * @returns {Promise<{[key: any]: any}>}\n   */\n  function getTemplateParameters(compilation, assets, assetTags) {\n    const templateParameters = options.templateParameters;\n    if (templateParameters === false) {\n      return Promise.resolve({});\n    }\n    if (typeof templateParameters !== 'function' && typeof templateParameters !== 'object') {\n      throw new Error('templateParameters has to be either a function or an object');\n    }\n    const templateParameterFunction = typeof templateParameters === 'function'\n    // A custom function can overwrite the entire template parameter preparation\n    ? templateParameters\n    // If the template parameters is an object merge it with the default values\n    : (compilation, assets, assetTags, options) => Object.assign({}, templateParametersGenerator(compilation, assets, assetTags, options), templateParameters);\n    const preparedAssetTags = {\n      headTags: prepareAssetTagGroupForRendering(assetTags.headTags),\n      bodyTags: prepareAssetTagGroupForRendering(assetTags.bodyTags)\n    };\n    return Promise.resolve().then(() => templateParameterFunction(compilation, assets, preparedAssetTags, options));\n  }\n\n  /**\n   * This function renders the actual html by executing the template function\n   *\n   * @param {(templateParameters) => string | Promise<string>} templateFunction\n   * @param {{\n      publicPath: string,\n      js: Array<string>,\n      css: Array<string>,\n      manifest?: string,\n      favicon?: string\n    }} assets\n   * @param {{\n       headTags: HtmlTagObject[],\n       bodyTags: HtmlTagObject[]\n     }} assetTags\n   * @param {WebpackCompilation} compilation\n   *\n   * @returns Promise<string>\n   */\n  function executeTemplate(templateFunction, assets, assetTags, compilation) {\n    // Template processing\n    const templateParamsPromise = getTemplateParameters(compilation, assets, assetTags);\n    return templateParamsPromise.then(templateParams => {\n      try {\n        // If html is a promise return the promise\n        // If html is a string turn it into a promise\n        return templateFunction(templateParams);\n      } catch (e) {\n        compilation.errors.push(new Error('Template execution failed: ' + e));\n        return Promise.reject(e);\n      }\n    });\n  }\n\n  /**\n   * Html Post processing\n   *\n   * @param {any} html\n   * The input html\n   * @param {any} assets\n   * @param {{\n       headTags: HtmlTagObject[],\n       bodyTags: HtmlTagObject[]\n     }} assetTags\n   * The asset tags to inject\n   *\n   * @returns {Promise<string>}\n   */\n  function postProcessHtml(html, assets, assetTags) {\n    if (typeof html !== 'string') {\n      return Promise.reject(new Error('Expected html to be a string but got ' + JSON.stringify(html)));\n    }\n    const htmlAfterInjection = options.inject ? injectAssetsIntoHtml(html, assets, assetTags) : html;\n    const htmlAfterMinification = minifyHtml(htmlAfterInjection);\n    return Promise.resolve(htmlAfterMinification);\n  }\n\n  /*\n   * Pushes the content of the given filename to the compilation assets\n   * @param {string} filename\n   * @param {WebpackCompilation} compilation\n   *\n   * @returns {string} file basename\n   */\n  function addFileToAssets(filename, compilation) {\n    filename = path.resolve(compilation.compiler.context, filename);\n    return fsReadFileAsync(filename).then(source => new webpack.sources.RawSource(source, false)).catch(() => Promise.reject(new Error('HtmlWebpackPlugin: could not load file ' + filename))).then(rawSource => {\n      const basename = path.basename(filename);\n      compilation.fileDependencies.add(filename);\n      compilation.emitAsset(basename, rawSource);\n      return basename;\n    });\n  }\n\n  /**\n   * Replace [contenthash] in filename\n   *\n   * @see https://survivejs.com/webpack/optimizing/adding-hashes-to-filenames/\n   *\n   * @param {string} filename\n   * @param {string|Buffer} fileContent\n   * @param {WebpackCompilation} compilation\n   * @returns {{ path: string, info: {} }}\n   */\n  function replacePlaceholdersInFilename(filename, fileContent, compilation) {\n    if (/\\[\\\\*([\\w:]+)\\\\*\\]/i.test(filename) === false) {\n      return {\n        path: filename,\n        info: {}\n      };\n    }\n    const hash = compiler.webpack.util.createHash(compilation.outputOptions.hashFunction);\n    hash.update(fileContent);\n    if (compilation.outputOptions.hashSalt) {\n      hash.update(compilation.outputOptions.hashSalt);\n    }\n    const contentHash = hash.digest(compilation.outputOptions.hashDigest).slice(0, compilation.outputOptions.hashDigestLength);\n    return compilation.getPathWithInfo(filename, {\n      contentHash,\n      chunk: {\n        hash: contentHash,\n        contentHash\n      }\n    });\n  }\n\n  /**\n   * Helper to sort chunks\n   * @param {string[]} entryNames\n   * @param {string|((entryNameA: string, entryNameB: string) => number)} sortMode\n   * @param {WebpackCompilation} compilation\n   */\n  function sortEntryChunks(entryNames, sortMode, compilation) {\n    // Custom function\n    if (typeof sortMode === 'function') {\n      return entryNames.sort(sortMode);\n    }\n    // Check if the given sort mode is a valid chunkSorter sort mode\n    if (typeof chunkSorter[sortMode] !== 'undefined') {\n      return chunkSorter[sortMode](entryNames, compilation, options);\n    }\n    throw new Error('\"' + sortMode + '\" is not a valid chunk sort mode');\n  }\n\n  /**\n   * Return all chunks from the compilation result which match the exclude and include filters\n   * @param {any} chunks\n   * @param {string[]|'all'} includedChunks\n   * @param {string[]} excludedChunks\n   */\n  function filterChunks(chunks, includedChunks, excludedChunks) {\n    return chunks.filter(chunkName => {\n      // Skip if the chunks should be filtered and the given chunk was not added explicity\n      if (Array.isArray(includedChunks) && includedChunks.indexOf(chunkName) === -1) {\n        return false;\n      }\n      // Skip if the chunks should be filtered and the given chunk was excluded explicity\n      if (Array.isArray(excludedChunks) && excludedChunks.indexOf(chunkName) !== -1) {\n        return false;\n      }\n      // Add otherwise\n      return true;\n    });\n  }\n\n  /**\n   * Generate the relative or absolute base url to reference images, css, and javascript files\n   * from within the html file - the publicPath\n   *\n   * @param {WebpackCompilation} compilation\n   * @param {string} childCompilationOutputName\n   * @param {string | 'auto'} customPublicPath\n   * @returns {string}\n   */\n  function getPublicPath(compilation, childCompilationOutputName, customPublicPath) {\n    const compilationHash = compilation.hash;\n\n    /**\n     * @type {string} the configured public path to the asset root\n     * if a path publicPath is set in the current webpack config use it otherwise\n     * fallback to a relative path\n     */\n    const webpackPublicPath = compilation.getAssetPath(compilation.outputOptions.publicPath, {\n      hash: compilationHash\n    });\n\n    // Webpack 5 introduced \"auto\" as default value\n    const isPublicPathDefined = webpackPublicPath !== 'auto';\n    let publicPath =\n    // If the html-webpack-plugin options contain a custom public path uset it\n    customPublicPath !== 'auto' ? customPublicPath : isPublicPathDefined\n    // If a hard coded public path exists use it\n    ? webpackPublicPath\n    // If no public path was set get a relative url path\n    : path.relative(path.resolve(compilation.options.output.path, path.dirname(childCompilationOutputName)), compilation.options.output.path).split(path.sep).join('/');\n    if (publicPath.length && publicPath.substr(-1, 1) !== '/') {\n      publicPath += '/';\n    }\n    return publicPath;\n  }\n\n  /**\n   * The htmlWebpackPluginAssets extracts the asset information of a webpack compilation\n   * for all given entry names\n   * @param {WebpackCompilation} compilation\n   * @param {string[]} entryNames\n   * @param {string | 'auto'} publicPath\n   * @returns {{\n      publicPath: string,\n      js: Array<string>,\n      css: Array<string>,\n      manifest?: string,\n      favicon?: string\n    }}\n   */\n  function htmlWebpackPluginAssets(compilation, entryNames, publicPath) {\n    const compilationHash = compilation.hash;\n    /**\n     * @type {{\n        publicPath: string,\n        js: Array<string>,\n        css: Array<string>,\n        manifest?: string,\n        favicon?: string\n      }}\n     */\n    const assets = {\n      // The public path\n      publicPath,\n      // Will contain all js and mjs files\n      js: [],\n      // Will contain all css files\n      css: [],\n      // Will contain the html5 appcache manifest files if it exists\n      manifest: Object.keys(compilation.assets).find(assetFile => path.extname(assetFile) === '.appcache'),\n      // Favicon\n      favicon: undefined\n    };\n\n    // Append a hash for cache busting\n    if (options.hash && assets.manifest) {\n      assets.manifest = appendHash(assets.manifest, compilationHash);\n    }\n\n    // Extract paths to .js, .mjs and .css files from the current compilation\n    const entryPointPublicPathMap = {};\n    const extensionRegexp = /\\.(css|js|mjs)(\\?|$)/;\n    for (let i = 0; i < entryNames.length; i++) {\n      const entryName = entryNames[i];\n      /** entryPointUnfilteredFiles - also includes hot module update files */\n      const entryPointUnfilteredFiles = compilation.entrypoints.get(entryName).getFiles();\n      const entryPointFiles = entryPointUnfilteredFiles.filter(chunkFile => {\n        // compilation.getAsset was introduced in webpack 4.4.0\n        // once the support pre webpack 4.4.0 is dropped please\n        // remove the following guard:\n        const asset = compilation.getAsset && compilation.getAsset(chunkFile);\n        if (!asset) {\n          return true;\n        }\n        // Prevent hot-module files from being included:\n        const assetMetaInformation = asset.info || {};\n        return !(assetMetaInformation.hotModuleReplacement || assetMetaInformation.development);\n      });\n\n      // Prepend the publicPath and append the hash depending on the\n      // webpack.output.publicPath and hashOptions\n      // E.g. bundle.js -> /bundle.js?hash\n      const entryPointPublicPaths = entryPointFiles.map(chunkFile => {\n        const entryPointPublicPath = publicPath + urlencodePath(chunkFile);\n        return options.hash ? appendHash(entryPointPublicPath, compilationHash) : entryPointPublicPath;\n      });\n      entryPointPublicPaths.forEach(entryPointPublicPath => {\n        const extMatch = extensionRegexp.exec(entryPointPublicPath);\n        // Skip if the public path is not a .css, .mjs or .js file\n        if (!extMatch) {\n          return;\n        }\n        // Skip if this file is already known\n        // (e.g. because of common chunk optimizations)\n        if (entryPointPublicPathMap[entryPointPublicPath]) {\n          return;\n        }\n        entryPointPublicPathMap[entryPointPublicPath] = true;\n        // ext will contain .js or .css, because .mjs recognizes as .js\n        const ext = extMatch[1] === 'mjs' ? 'js' : extMatch[1];\n        assets[ext].push(entryPointPublicPath);\n      });\n    }\n    return assets;\n  }\n\n  /**\n   * Converts a favicon file from disk to a webpack resource\n   * and returns the url to the resource\n   *\n   * @param {string|false} faviconFilePath\n   * @param {WebpackCompilation} compilation\n   * @param {string} publicPath\n   * @returns {Promise<string|undefined>}\n   */\n  function getFaviconPublicPath(faviconFilePath, compilation, publicPath) {\n    if (!faviconFilePath) {\n      return Promise.resolve(undefined);\n    }\n    return addFileToAssets(faviconFilePath, compilation).then(faviconName => {\n      const faviconPath = publicPath + faviconName;\n      if (options.hash) {\n        return appendHash(faviconPath, compilation.hash);\n      }\n      return faviconPath;\n    });\n  }\n\n  /**\n   * Generate all tags script for the given file paths\n   * @param {Array<string>} jsAssets\n   * @returns {Array<HtmlTagObject>}\n   */\n  function generatedScriptTags(jsAssets) {\n    return jsAssets.map(scriptAsset => ({\n      tagName: 'script',\n      voidTag: false,\n      meta: {\n        plugin: 'html-webpack-plugin'\n      },\n      attributes: {\n        defer: options.scriptLoading === 'defer',\n        type: options.scriptLoading === 'module' ? 'module' : undefined,\n        src: scriptAsset\n      }\n    }));\n  }\n\n  /**\n   * Generate all style tags for the given file paths\n   * @param {Array<string>} cssAssets\n   * @returns {Array<HtmlTagObject>}\n   */\n  function generateStyleTags(cssAssets) {\n    return cssAssets.map(styleAsset => ({\n      tagName: 'link',\n      voidTag: true,\n      meta: {\n        plugin: 'html-webpack-plugin'\n      },\n      attributes: {\n        href: styleAsset,\n        rel: 'stylesheet'\n      }\n    }));\n  }\n\n  /**\n   * Generate an optional base tag\n   * @param { false\n            | string\n            | {[attributeName: string]: string} // attributes e.g. { href:\"http://example.com/page.html\" target:\"_blank\" }\n            } baseOption\n  * @returns {Array<HtmlTagObject>}\n  */\n  function generateBaseTag(baseOption) {\n    if (baseOption === false) {\n      return [];\n    } else {\n      return [{\n        tagName: 'base',\n        voidTag: true,\n        meta: {\n          plugin: 'html-webpack-plugin'\n        },\n        attributes: typeof baseOption === 'string' ? {\n          href: baseOption\n        } : baseOption\n      }];\n    }\n  }\n\n  /**\n   * Generate all meta tags for the given meta configuration\n   * @param {false | {\n            [name: string]:\n              false // disabled\n              | string // name content pair e.g. {viewport: 'width=device-width, initial-scale=1, shrink-to-fit=no'}`\n              | {[attributeName: string]: string|boolean} // custom properties e.g. { name:\"viewport\" content:\"width=500, initial-scale=1\" }\n        }} metaOptions\n  * @returns {Array<HtmlTagObject>}\n  */\n  function generatedMetaTags(metaOptions) {\n    if (metaOptions === false) {\n      return [];\n    }\n    // Make tags self-closing in case of xhtml\n    // Turn { \"viewport\" : \"width=500, initial-scale=1\" } into\n    // [{ name:\"viewport\" content:\"width=500, initial-scale=1\" }]\n    const metaTagAttributeObjects = Object.keys(metaOptions).map(metaName => {\n      const metaTagContent = metaOptions[metaName];\n      return typeof metaTagContent === 'string' ? {\n        name: metaName,\n        content: metaTagContent\n      } : metaTagContent;\n    }).filter(attribute => attribute !== false);\n    // Turn [{ name:\"viewport\" content:\"width=500, initial-scale=1\" }] into\n    // the html-webpack-plugin tag structure\n    return metaTagAttributeObjects.map(metaTagAttributes => {\n      if (metaTagAttributes === false) {\n        throw new Error('Invalid meta tag');\n      }\n      return {\n        tagName: 'meta',\n        voidTag: true,\n        meta: {\n          plugin: 'html-webpack-plugin'\n        },\n        attributes: metaTagAttributes\n      };\n    });\n  }\n\n  /**\n   * Generate a favicon tag for the given file path\n   * @param {string| undefined} faviconPath\n   * @returns {Array<HtmlTagObject>}\n   */\n  function generateFaviconTags(faviconPath) {\n    if (!faviconPath) {\n      return [];\n    }\n    return [{\n      tagName: 'link',\n      voidTag: true,\n      meta: {\n        plugin: 'html-webpack-plugin'\n      },\n      attributes: {\n        rel: 'icon',\n        href: faviconPath\n      }\n    }];\n  }\n\n  /**\n   * Group assets to head and bottom tags\n   *\n   * @param {{\n      scripts: Array<HtmlTagObject>;\n      styles: Array<HtmlTagObject>;\n      meta: Array<HtmlTagObject>;\n    }} assetTags\n  * @param {\"body\" | \"head\"} scriptTarget\n  * @returns {{\n      headTags: Array<HtmlTagObject>;\n      bodyTags: Array<HtmlTagObject>;\n    }}\n  */\n  function generateAssetGroups(assetTags, scriptTarget) {\n    /** @type {{ headTags: Array<HtmlTagObject>; bodyTags: Array<HtmlTagObject>; }} */\n    const result = {\n      headTags: [...assetTags.meta, ...assetTags.styles],\n      bodyTags: []\n    };\n    // Add script tags to head or body depending on\n    // the htmlPluginOptions\n    if (scriptTarget === 'body') {\n      result.bodyTags.push(...assetTags.scripts);\n    } else {\n      // If script loading is blocking add the scripts to the end of the head\n      // If script loading is non-blocking add the scripts infront of the css files\n      const insertPosition = options.scriptLoading === 'blocking' ? result.headTags.length : assetTags.meta.length;\n      result.headTags.splice(insertPosition, 0, ...assetTags.scripts);\n    }\n    return result;\n  }\n\n  /**\n   * Add toString methods for easier rendering\n   * inside the template\n   *\n   * @param {Array<HtmlTagObject>} assetTagGroup\n   * @returns {Array<HtmlTagObject>}\n   */\n  function prepareAssetTagGroupForRendering(assetTagGroup) {\n    const xhtml = options.xhtml;\n    return HtmlTagArray.from(assetTagGroup.map(assetTag => {\n      const copiedAssetTag = Object.assign({}, assetTag);\n      copiedAssetTag.toString = function () {\n        return htmlTagObjectToString(this, xhtml);\n      };\n      return copiedAssetTag;\n    }));\n  }\n\n  /**\n   * Injects the assets into the given html string\n   *\n   * @param {string} html\n   * The input html\n   * @param {any} assets\n   * @param {{\n       headTags: HtmlTagObject[],\n       bodyTags: HtmlTagObject[]\n     }} assetTags\n   * The asset tags to inject\n   *\n   * @returns {string}\n   */\n  function injectAssetsIntoHtml(html, assets, assetTags) {\n    const htmlRegExp = /(<html[^>]*>)/i;\n    const headRegExp = /(<\\/head\\s*>)/i;\n    const bodyRegExp = /(<\\/body\\s*>)/i;\n    const body = assetTags.bodyTags.map(assetTagObject => htmlTagObjectToString(assetTagObject, options.xhtml));\n    const head = assetTags.headTags.map(assetTagObject => htmlTagObjectToString(assetTagObject, options.xhtml));\n    if (body.length) {\n      if (bodyRegExp.test(html)) {\n        // Append assets to body element\n        html = html.replace(bodyRegExp, match => body.join('') + match);\n      } else {\n        // Append scripts to the end of the file if no <body> element exists:\n        html += body.join('');\n      }\n    }\n    if (head.length) {\n      // Create a head tag if none exists\n      if (!headRegExp.test(html)) {\n        if (!htmlRegExp.test(html)) {\n          html = '<head></head>' + html;\n        } else {\n          html = html.replace(htmlRegExp, match => match + '<head></head>');\n        }\n      }\n\n      // Append assets to head element\n      html = html.replace(headRegExp, match => head.join('') + match);\n    }\n\n    // Inject manifest into the opening html tag\n    if (assets.manifest) {\n      html = html.replace(/(<html[^>]*)(>)/i, (match, start, end) => {\n        // Append the manifest only if no manifest was specified\n        if (/\\smanifest\\s*=/.test(match)) {\n          return match;\n        }\n        return start + ' manifest=\"' + assets.manifest + '\"' + end;\n      });\n    }\n    return html;\n  }\n\n  /**\n   * Appends a cache busting hash to the query string of the url\n   * E.g. http://localhost:8080/ -> http://localhost:8080/?50c9096ba6183fd728eeb065a26ec175\n   * @param {string} url\n   * @param {string} hash\n   */\n  function appendHash(url, hash) {\n    if (!url) {\n      return url;\n    }\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + hash;\n  }\n\n  /**\n   * Encode each path component using `encodeURIComponent` as files can contain characters\n   * which needs special encoding in URLs like `+ `.\n   *\n   * Valid filesystem characters which need to be encoded for urls:\n   *\n   * # pound, % percent, & ampersand, { left curly bracket, } right curly bracket,\n   * \\ back slash, < left angle bracket, > right angle bracket, * asterisk, ? question mark,\n   * blank spaces, $ dollar sign, ! exclamation point, ' single quotes, \" double quotes,\n   * : colon, @ at sign, + plus sign, ` backtick, | pipe, = equal sign\n   *\n   * However the query string must not be encoded:\n   *\n   *  fo:demonstration-path/very fancy+name.js?path=/home?value=abc&value=def#zzz\n   *    ^             ^    ^    ^     ^    ^  ^    ^^    ^     ^   ^     ^   ^\n   *    |             |    |    |     |    |  |    ||    |     |   |     |   |\n   *    encoded       |    |    encoded    |  |    ||    |     |   |     |   |\n   *                 ignored              ignored  ignored     ignored   ignored\n   *\n   * @param {string} filePath\n   */\n  function urlencodePath(filePath) {\n    // People use the filepath in quite unexpected ways.\n    // Try to extract the first querystring of the url:\n    //\n    // some+path/demo.html?value=abc?def\n    //\n    const queryStringStart = filePath.indexOf('?');\n    const urlPath = queryStringStart === -1 ? filePath : filePath.substr(0, queryStringStart);\n    const queryString = filePath.substr(urlPath.length);\n    // Encode all parts except '/' which are not part of the querystring:\n    const encodedUrlPath = urlPath.split('/').map(encodeURIComponent).join('/');\n    return encodedUrlPath + queryString;\n  }\n\n  /**\n   * Helper to return the absolute template path with a fallback loader\n   * @param {string} template\n   * The path to the template e.g. './index.html'\n   * @param {string} context\n   * The webpack base resolution path for relative paths e.g. process.cwd()\n   */\n  function getFullTemplatePath(template, context) {\n    if (template === 'auto') {\n      template = path.resolve(context, 'src/index.ejs');\n      if (!fs.existsSync(template)) {\n        template = path.join(__dirname, 'default_index.ejs');\n      }\n    }\n    // If the template doesn't use a loader use the lodash template loader\n    if (template.indexOf('!') === -1) {\n      template = require.resolve('./lib/loader.js') + '!' + path.resolve(context, template);\n    }\n    // Resolve template path\n    return template.replace(/([!])([^/\\\\][^!?]+|[^/\\\\!?])($|\\?[^!?\\n]+$)/, (match, prefix, filepath, postfix) => prefix + path.resolve(filepath) + postfix);\n  }\n\n  /**\n   * Minify the given string using html-minifier-terser\n   *\n   * As this is a breaking change to html-webpack-plugin 3.x\n   * provide an extended error message to explain how to get back\n   * to the old behaviour\n   *\n   * @param {string} html\n   */\n  function minifyHtml(html) {\n    if (typeof options.minify !== 'object') {\n      return html;\n    }\n    try {\n      return require('html-minifier-terser').minify(html, options.minify);\n    } catch (e) {\n      const isParseError = String(e.message).indexOf('Parse Error') === 0;\n      if (isParseError) {\n        e.message = 'html-webpack-plugin could not minify the generated output.\\n' + 'In production mode the html minifcation is enabled by default.\\n' + 'If you are not generating a valid html output please disable it manually.\\n' + 'You can do so by adding the following setting to your HtmlWebpackPlugin config:\\n|\\n|' + '    minify: false\\n|\\n' + 'See https://github.com/jantimon/html-webpack-plugin#options for details.\\n\\n' + 'For parser dedicated bugs please create an issue here:\\n' + 'https://danielruf.github.io/html-minifier-terser/' + '\\n' + e.message;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Helper to return a sorted unique array of all asset files out of the\n   * asset object\n   */\n  function getAssetFiles(assets) {\n    const files = _.uniq(Object.keys(assets).filter(assetType => assetType !== 'chunks' && assets[assetType]).reduce((files, assetType) => files.concat(assets[assetType]), []));\n    files.sort();\n    return files;\n  }\n}\n\n/**\n * The default for options.templateParameter\n * Generate the template parameters\n *\n * Generate the template parameters for the template function\n * @param {WebpackCompilation} compilation\n * @param {{\n   publicPath: string,\n   js: Array<string>,\n   css: Array<string>,\n   manifest?: string,\n   favicon?: string\n }} assets\n * @param {{\n     headTags: HtmlTagObject[],\n     bodyTags: HtmlTagObject[]\n   }} assetTags\n * @param {ProcessedHtmlWebpackOptions} options\n * @returns {TemplateParameter}\n */\nfunction templateParametersGenerator(compilation, assets, assetTags, options) {\n  return {\n    compilation: compilation,\n    webpackConfig: compilation.options,\n    htmlWebpackPlugin: {\n      tags: assetTags,\n      files: assets,\n      options: options\n    }\n  };\n}\n\n// Statics:\n/**\n * The major version number of this plugin\n */\nHtmlWebpackPlugin.version = 5;\n\n/**\n * A static helper to get the hooks for this plugin\n *\n * Usage: HtmlWebpackPlugin.getHooks(compilation).HOOK_NAME.tapAsync('YourPluginName', () => { ... });\n */\nHtmlWebpackPlugin.getHooks = getHtmlWebpackPluginHooks;\nHtmlWebpackPlugin.createHtmlTagObject = createHtmlTagObject;\nmodule.exports = HtmlWebpackPlugin;","map":{"version":3,"names":["promisify","require","vm","fs","_","path","CachedChildCompilation","createHtmlTagObject","htmlTagObjectToString","HtmlTagArray","prettyError","chunkSorter","getHtmlWebpackPluginHooks","assert","fsReadFileAsync","readFile","HtmlWebpackPlugin","constructor","options","userOptions","version","apply","compiler","hooks","initialize","tap","defaultOptions","template","templateContent","templateParameters","templateParametersGenerator","filename","publicPath","undefined","hash","inject","scriptLoading","compile","favicon","minify","cache","showErrors","chunks","excludeChunks","chunksSortMode","meta","base","title","xhtml","Object","assign","defaultMeta","viewport","userOptionFilename","filenameFunction","entryName","replace","entryNames","keys","entry","outputFileNames","Set","length","map","entryOptions","Array","from","forEach","instanceOptions","hookIntoCompiler","evaluateCompilationResult","source","templateFilename","Promise","reject","Error","indexOf","templateWithoutLoaders","vmContext","createContext","global","HTML_WEBPACK_PLUGIN","htmlWebpackPluginPublicPath","URL","__filename","vmScript","Script","newSource","runInContext","e","__esModule","default","resolve","plugin","webpack","assetJson","previousEmittedAssets","getFullTemplatePath","context","childCompilerPlugin","addEntry","normalize","outputPath","output","relative","isProductionLikeMode","mode","collapseWhitespace","keepClosingSlash","removeComments","removeRedundantAttributes","removeScriptTypeAttributes","removeStyleLinkTypeAttributes","useShortDoctype","thisCompilation","compilation","processAssets","tapAsync","name","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_INLINE","compilationAssets","callback","entrypoints","filteredEntryNames","filterChunks","sortedEntryNames","sortEntryChunks","templateResult","mainCompilationHash","getCompilationEntryResult","errors","push","error","toString","isCompilationCached","htmlPublicPath","getPublicPath","assets","htmlWebpackPluginAssets","newAssetJson","JSON","stringify","getAssetFiles","_ref","html","emitAsset","sources","RawSource","assetsPromise","getFaviconPublicPath","then","faviconPath","beforeAssetTagGeneration","promise","outputName","assetTagGroupsPromise","_ref2","alterAssetTags","assetTags","scripts","generatedScriptTags","js","styles","generateStyleTags","css","generateBaseTag","generatedMetaTags","generateFaviconTags","_ref3","scriptTarget","assetGroups","generateAssetGroups","alterAssetTagGroups","headTags","bodyTags","templateEvaluationPromise","toHtml","compiledEntry","content","templateExectutionPromise","all","_ref4","assetsHookResult","compilationResult","executeTemplate","injectedHtmlPromise","_ref5","pluginArgs","afterTemplateExecution","_ref6","postProcessHtml","emitHtmlPromise","beforeEmit","result","catch","err","deprecate","match","replacedFilename","replacePlaceholdersInFilename","info","finalOutputName","afterEmit","console","getTemplateParameters","templateParameterFunction","preparedAssetTags","prepareAssetTagGroupForRendering","templateFunction","templateParamsPromise","templateParams","htmlAfterInjection","injectAssetsIntoHtml","htmlAfterMinification","minifyHtml","addFileToAssets","rawSource","basename","fileDependencies","add","fileContent","test","util","createHash","outputOptions","hashFunction","update","hashSalt","contentHash","digest","hashDigest","slice","hashDigestLength","getPathWithInfo","chunk","sortMode","sort","includedChunks","excludedChunks","filter","chunkName","isArray","childCompilationOutputName","customPublicPath","compilationHash","webpackPublicPath","getAssetPath","isPublicPathDefined","dirname","split","sep","join","substr","manifest","find","assetFile","extname","appendHash","entryPointPublicPathMap","extensionRegexp","i","entryPointUnfilteredFiles","get","getFiles","entryPointFiles","chunkFile","asset","getAsset","assetMetaInformation","hotModuleReplacement","development","entryPointPublicPaths","entryPointPublicPath","urlencodePath","extMatch","exec","ext","faviconFilePath","faviconName","jsAssets","scriptAsset","tagName","voidTag","attributes","defer","type","src","cssAssets","styleAsset","href","rel","baseOption","metaOptions","metaTagAttributeObjects","metaName","metaTagContent","attribute","metaTagAttributes","insertPosition","splice","assetTagGroup","assetTag","copiedAssetTag","htmlRegExp","headRegExp","bodyRegExp","body","assetTagObject","head","start","end","url","filePath","queryStringStart","urlPath","queryString","encodedUrlPath","encodeURIComponent","existsSync","__dirname","prefix","filepath","postfix","isParseError","String","message","files","uniq","assetType","reduce","concat","webpackConfig","htmlWebpackPlugin","tags","getHooks","module","exports"],"sources":["/home/insultados/my-app/node_modules/html-webpack-plugin/index.js"],"sourcesContent":["// @ts-check\n// Import types\n/** @typedef {import(\"./typings\").HtmlTagObject} HtmlTagObject */\n/** @typedef {import(\"./typings\").Options} HtmlWebpackOptions */\n/** @typedef {import(\"./typings\").ProcessedOptions} ProcessedHtmlWebpackOptions */\n/** @typedef {import(\"./typings\").TemplateParameter} TemplateParameter */\n/** @typedef {import(\"webpack/lib/Compiler.js\")} WebpackCompiler */\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n'use strict';\n\nconst promisify = require('util').promisify;\n\nconst vm = require('vm');\nconst fs = require('fs');\nconst _ = require('lodash');\nconst path = require('path');\nconst { CachedChildCompilation } = require('./lib/cached-child-compiler');\n\nconst { createHtmlTagObject, htmlTagObjectToString, HtmlTagArray } = require('./lib/html-tags');\n\nconst prettyError = require('./lib/errors.js');\nconst chunkSorter = require('./lib/chunksorter.js');\nconst getHtmlWebpackPluginHooks = require('./lib/hooks.js').getHtmlWebpackPluginHooks;\nconst { assert } = require('console');\n\nconst fsReadFileAsync = promisify(fs.readFile);\n\nclass HtmlWebpackPlugin {\n  /**\n   * @param {HtmlWebpackOptions} [options]\n   */\n  constructor (options) {\n    /** @type {HtmlWebpackOptions} */\n    this.userOptions = options || {};\n    this.version = HtmlWebpackPlugin.version;\n  }\n\n  apply (compiler) {\n    // Wait for configuration preset plugions to apply all configure webpack defaults\n    compiler.hooks.initialize.tap('HtmlWebpackPlugin', () => {\n      const userOptions = this.userOptions;\n\n      // Default options\n      /** @type {ProcessedHtmlWebpackOptions} */\n      const defaultOptions = {\n        template: 'auto',\n        templateContent: false,\n        templateParameters: templateParametersGenerator,\n        filename: 'index.html',\n        publicPath: userOptions.publicPath === undefined ? 'auto' : userOptions.publicPath,\n        hash: false,\n        inject: userOptions.scriptLoading === 'blocking' ? 'body' : 'head',\n        scriptLoading: 'defer',\n        compile: true,\n        favicon: false,\n        minify: 'auto',\n        cache: true,\n        showErrors: true,\n        chunks: 'all',\n        excludeChunks: [],\n        chunksSortMode: 'auto',\n        meta: {},\n        base: false,\n        title: 'Webpack App',\n        xhtml: false\n      };\n\n      /** @type {ProcessedHtmlWebpackOptions} */\n      const options = Object.assign(defaultOptions, userOptions);\n      this.options = options;\n\n      // Assert correct option spelling\n      assert(options.scriptLoading === 'defer' || options.scriptLoading === 'blocking' || options.scriptLoading === 'module', 'scriptLoading needs to be set to \"defer\", \"blocking\" or \"module\"');\n      assert(options.inject === true || options.inject === false || options.inject === 'head' || options.inject === 'body', 'inject needs to be set to true, false, \"head\" or \"body');\n\n      // Default metaOptions if no template is provided\n      if (!userOptions.template && options.templateContent === false && options.meta) {\n        const defaultMeta = {\n        // From https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag\n          viewport: 'width=device-width, initial-scale=1'\n        };\n        options.meta = Object.assign({}, options.meta, defaultMeta, userOptions.meta);\n      }\n\n      // entryName to fileName conversion function\n      const userOptionFilename = userOptions.filename || defaultOptions.filename;\n      const filenameFunction = typeof userOptionFilename === 'function'\n        ? userOptionFilename\n        // Replace '[name]' with entry name\n        : (entryName) => userOptionFilename.replace(/\\[name\\]/g, entryName);\n\n      /** output filenames for the given entry names */\n      const entryNames = Object.keys(compiler.options.entry);\n      const outputFileNames = new Set((entryNames.length ? entryNames : ['main']).map(filenameFunction));\n\n      /** Option for every entry point */\n      const entryOptions = Array.from(outputFileNames).map((filename) => ({\n        ...options,\n        filename\n      }));\n\n      // Hook all options into the webpack compiler\n      entryOptions.forEach((instanceOptions) => {\n        hookIntoCompiler(compiler, instanceOptions, this);\n      });\n    });\n  }\n\n  /**\n   * Once webpack is done with compiling the template into a NodeJS code this function\n   * evaluates it to generate the html result\n   *\n   * The evaluateCompilationResult is only a class function to allow spying during testing.\n   * Please change that in a further refactoring\n   *\n   * @param {string} source\n   * @param {string} templateFilename\n   * @returns {Promise<string | (() => string | Promise<string>)>}\n   */\n  evaluateCompilationResult (source, publicPath, templateFilename) {\n    if (!source) {\n      return Promise.reject(new Error('The child compilation didn\\'t provide a result'));\n    }\n    // The LibraryTemplatePlugin stores the template result in a local variable.\n    // By adding it to the end the value gets extracted during evaluation\n    if (source.indexOf('HTML_WEBPACK_PLUGIN_RESULT') >= 0) {\n      source += ';\\nHTML_WEBPACK_PLUGIN_RESULT';\n    }\n    const templateWithoutLoaders = templateFilename.replace(/^.+!/, '').replace(/\\?.+$/, '');\n    const vmContext = vm.createContext({\n      ...global,\n      HTML_WEBPACK_PLUGIN: true,\n      require: require,\n      htmlWebpackPluginPublicPath: publicPath,\n      URL: require('url').URL,\n      __filename: templateWithoutLoaders\n    });\n    const vmScript = new vm.Script(source, { filename: templateWithoutLoaders });\n    // Evaluate code and cast to string\n    let newSource;\n    try {\n      newSource = vmScript.runInContext(vmContext);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n    if (typeof newSource === 'object' && newSource.__esModule && newSource.default) {\n      newSource = newSource.default;\n    }\n    return typeof newSource === 'string' || typeof newSource === 'function'\n      ? Promise.resolve(newSource)\n      : Promise.reject(new Error('The loader \"' + templateWithoutLoaders + '\" didn\\'t return html.'));\n  }\n}\n\n/**\n * connect the html-webpack-plugin to the webpack compiler lifecycle hooks\n *\n * @param {import('webpack').Compiler} compiler\n * @param {ProcessedHtmlWebpackOptions} options\n * @param {HtmlWebpackPlugin} plugin\n */\nfunction hookIntoCompiler (compiler, options, plugin) {\n  const webpack = compiler.webpack;\n  // Instance variables to keep caching information\n  // for multiple builds\n  let assetJson;\n  /**\n   * store the previous generated asset to emit them even if the content did not change\n   * to support watch mode for third party plugins like the clean-webpack-plugin or the compression plugin\n   * @type {Array<{html: string, name: string}>}\n   */\n  let previousEmittedAssets = [];\n\n  options.template = getFullTemplatePath(options.template, compiler.context);\n\n  // Inject child compiler plugin\n  const childCompilerPlugin = new CachedChildCompilation(compiler);\n  if (!options.templateContent) {\n    childCompilerPlugin.addEntry(options.template);\n  }\n\n  // convert absolute filename into relative so that webpack can\n  // generate it at correct location\n  const filename = options.filename;\n  if (path.resolve(filename) === path.normalize(filename)) {\n    const outputPath = /** @type {string} - Once initialized the path is always a string */(compiler.options.output.path);\n    options.filename = path.relative(outputPath, filename);\n  }\n\n  // Check if webpack is running in production mode\n  // @see https://github.com/webpack/webpack/blob/3366421f1784c449f415cda5930a8e445086f688/lib/WebpackOptionsDefaulter.js#L12-L14\n  const isProductionLikeMode = compiler.options.mode === 'production' || !compiler.options.mode;\n\n  const minify = options.minify;\n  if (minify === true || (minify === 'auto' && isProductionLikeMode)) {\n    /** @type { import('html-minifier-terser').Options } */\n    options.minify = {\n      // https://www.npmjs.com/package/html-minifier-terser#options-quick-reference\n      collapseWhitespace: true,\n      keepClosingSlash: true,\n      removeComments: true,\n      removeRedundantAttributes: true,\n      removeScriptTypeAttributes: true,\n      removeStyleLinkTypeAttributes: true,\n      useShortDoctype: true\n    };\n  }\n\n  compiler.hooks.thisCompilation.tap('HtmlWebpackPlugin',\n    /**\n       * Hook into the webpack compilation\n       * @param {WebpackCompilation} compilation\n      */\n    (compilation) => {\n      compilation.hooks.processAssets.tapAsync(\n        {\n          name: 'HtmlWebpackPlugin',\n          stage:\n          /**\n           * Generate the html after minification and dev tooling is done\n           */\n          webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_INLINE\n        },\n        /**\n         * Hook into the process assets hook\n         * @param {WebpackCompilation} compilationAssets\n         * @param {(err?: Error) => void} callback\n         */\n        (compilationAssets, callback) => {\n          // Get all entry point names for this html file\n          const entryNames = Array.from(compilation.entrypoints.keys());\n          const filteredEntryNames = filterChunks(entryNames, options.chunks, options.excludeChunks);\n          const sortedEntryNames = sortEntryChunks(filteredEntryNames, options.chunksSortMode, compilation);\n\n          const templateResult = options.templateContent\n            ? { mainCompilationHash: compilation.hash }\n            : childCompilerPlugin.getCompilationEntryResult(options.template);\n\n          if ('error' in templateResult) {\n            compilation.errors.push(prettyError(templateResult.error, compiler.context).toString());\n          }\n\n          // If the child compilation was not executed during a previous main compile run\n          // it is a cached result\n          const isCompilationCached = templateResult.mainCompilationHash !== compilation.hash;\n\n          /** The public path used inside the html file */\n          const htmlPublicPath = getPublicPath(compilation, options.filename, options.publicPath);\n\n          /** Generated file paths from the entry point names */\n          const assets = htmlWebpackPluginAssets(compilation, sortedEntryNames, htmlPublicPath);\n\n          // If the template and the assets did not change we don't have to emit the html\n          const newAssetJson = JSON.stringify(getAssetFiles(assets));\n          if (isCompilationCached && options.cache && assetJson === newAssetJson) {\n            previousEmittedAssets.forEach(({ name, html }) => {\n              compilation.emitAsset(name, new webpack.sources.RawSource(html, false));\n            });\n            return callback();\n          } else {\n            previousEmittedAssets = [];\n            assetJson = newAssetJson;\n          }\n\n          // The html-webpack plugin uses a object representation for the html-tags which will be injected\n          // to allow altering them more easily\n          // Just before they are converted a third-party-plugin author might change the order and content\n          const assetsPromise = getFaviconPublicPath(options.favicon, compilation, assets.publicPath)\n            .then((faviconPath) => {\n              assets.favicon = faviconPath;\n              return getHtmlWebpackPluginHooks(compilation).beforeAssetTagGeneration.promise({\n                assets: assets,\n                outputName: options.filename,\n                plugin: plugin\n              });\n            });\n\n          // Turn the js and css paths into grouped HtmlTagObjects\n          const assetTagGroupsPromise = assetsPromise\n          // And allow third-party-plugin authors to reorder and change the assetTags before they are grouped\n            .then(({ assets }) => getHtmlWebpackPluginHooks(compilation).alterAssetTags.promise({\n              assetTags: {\n                scripts: generatedScriptTags(assets.js),\n                styles: generateStyleTags(assets.css),\n                meta: [\n                  ...generateBaseTag(options.base),\n                  ...generatedMetaTags(options.meta),\n                  ...generateFaviconTags(assets.favicon)\n                ]\n              },\n              outputName: options.filename,\n              publicPath: htmlPublicPath,\n              plugin: plugin\n            }))\n            .then(({ assetTags }) => {\n              // Inject scripts to body unless it set explicitly to head\n              const scriptTarget = options.inject === 'head' ||\n                (options.inject !== 'body' && options.scriptLoading !== 'blocking') ? 'head' : 'body';\n              // Group assets to `head` and `body` tag arrays\n              const assetGroups = generateAssetGroups(assetTags, scriptTarget);\n              // Allow third-party-plugin authors to reorder and change the assetTags once they are grouped\n              return getHtmlWebpackPluginHooks(compilation).alterAssetTagGroups.promise({\n                headTags: assetGroups.headTags,\n                bodyTags: assetGroups.bodyTags,\n                outputName: options.filename,\n                publicPath: htmlPublicPath,\n                plugin: plugin\n              });\n            });\n\n          // Turn the compiled template into a nodejs function or into a nodejs string\n          const templateEvaluationPromise = Promise.resolve()\n            .then(() => {\n              if ('error' in templateResult) {\n                return options.showErrors ? prettyError(templateResult.error, compiler.context).toHtml() : 'ERROR';\n              }\n              // Allow to use a custom function / string instead\n              if (options.templateContent !== false) {\n                return options.templateContent;\n              }\n              // Once everything is compiled evaluate the html factory\n              // and replace it with its content\n              return ('compiledEntry' in templateResult)\n                ? plugin.evaluateCompilationResult(templateResult.compiledEntry.content, htmlPublicPath, options.template)\n                : Promise.reject(new Error('Child compilation contained no compiledEntry'));\n            });\n          const templateExectutionPromise = Promise.all([assetsPromise, assetTagGroupsPromise, templateEvaluationPromise])\n          // Execute the template\n            .then(([assetsHookResult, assetTags, compilationResult]) => typeof compilationResult !== 'function'\n              ? compilationResult\n              : executeTemplate(compilationResult, assetsHookResult.assets, { headTags: assetTags.headTags, bodyTags: assetTags.bodyTags }, compilation));\n\n          const injectedHtmlPromise = Promise.all([assetTagGroupsPromise, templateExectutionPromise])\n          // Allow plugins to change the html before assets are injected\n            .then(([assetTags, html]) => {\n              const pluginArgs = { html, headTags: assetTags.headTags, bodyTags: assetTags.bodyTags, plugin: plugin, outputName: options.filename };\n              return getHtmlWebpackPluginHooks(compilation).afterTemplateExecution.promise(pluginArgs);\n            })\n            .then(({ html, headTags, bodyTags }) => {\n              return postProcessHtml(html, assets, { headTags, bodyTags });\n            });\n\n          const emitHtmlPromise = injectedHtmlPromise\n          // Allow plugins to change the html after assets are injected\n            .then((html) => {\n              const pluginArgs = { html, plugin: plugin, outputName: options.filename };\n              return getHtmlWebpackPluginHooks(compilation).beforeEmit.promise(pluginArgs)\n                .then(result => result.html);\n            })\n            .catch(err => {\n              // In case anything went wrong the promise is resolved\n              // with the error message and an error is logged\n              compilation.errors.push(prettyError(err, compiler.context).toString());\n              return options.showErrors ? prettyError(err, compiler.context).toHtml() : 'ERROR';\n            })\n            .then(html => {\n              const filename = options.filename.replace(/\\[templatehash([^\\]]*)\\]/g, require('util').deprecate(\n                (match, options) => `[contenthash${options}]`,\n                '[templatehash] is now [contenthash]')\n              );\n              const replacedFilename = replacePlaceholdersInFilename(filename, html, compilation);\n              // Add the evaluated html code to the webpack assets\n              compilation.emitAsset(replacedFilename.path, new webpack.sources.RawSource(html, false), replacedFilename.info);\n              previousEmittedAssets.push({ name: replacedFilename.path, html });\n              return replacedFilename.path;\n            })\n            .then((finalOutputName) => getHtmlWebpackPluginHooks(compilation).afterEmit.promise({\n              outputName: finalOutputName,\n              plugin: plugin\n            }).catch(err => {\n              console.error(err);\n              return null;\n            }).then(() => null));\n\n          // Once all files are added to the webpack compilation\n          // let the webpack compiler continue\n          emitHtmlPromise.then(() => {\n            callback();\n          });\n        });\n    });\n\n  /**\n   * Generate the template parameters for the template function\n   * @param {WebpackCompilation} compilation\n   * @param {{\n      publicPath: string,\n      js: Array<string>,\n      css: Array<string>,\n      manifest?: string,\n      favicon?: string\n    }} assets\n   * @param {{\n       headTags: HtmlTagObject[],\n       bodyTags: HtmlTagObject[]\n     }} assetTags\n   * @returns {Promise<{[key: any]: any}>}\n   */\n  function getTemplateParameters (compilation, assets, assetTags) {\n    const templateParameters = options.templateParameters;\n    if (templateParameters === false) {\n      return Promise.resolve({});\n    }\n    if (typeof templateParameters !== 'function' && typeof templateParameters !== 'object') {\n      throw new Error('templateParameters has to be either a function or an object');\n    }\n    const templateParameterFunction = typeof templateParameters === 'function'\n      // A custom function can overwrite the entire template parameter preparation\n      ? templateParameters\n      // If the template parameters is an object merge it with the default values\n      : (compilation, assets, assetTags, options) => Object.assign({},\n        templateParametersGenerator(compilation, assets, assetTags, options),\n        templateParameters\n      );\n    const preparedAssetTags = {\n      headTags: prepareAssetTagGroupForRendering(assetTags.headTags),\n      bodyTags: prepareAssetTagGroupForRendering(assetTags.bodyTags)\n    };\n    return Promise\n      .resolve()\n      .then(() => templateParameterFunction(compilation, assets, preparedAssetTags, options));\n  }\n\n  /**\n   * This function renders the actual html by executing the template function\n   *\n   * @param {(templateParameters) => string | Promise<string>} templateFunction\n   * @param {{\n      publicPath: string,\n      js: Array<string>,\n      css: Array<string>,\n      manifest?: string,\n      favicon?: string\n    }} assets\n   * @param {{\n       headTags: HtmlTagObject[],\n       bodyTags: HtmlTagObject[]\n     }} assetTags\n   * @param {WebpackCompilation} compilation\n   *\n   * @returns Promise<string>\n   */\n  function executeTemplate (templateFunction, assets, assetTags, compilation) {\n    // Template processing\n    const templateParamsPromise = getTemplateParameters(compilation, assets, assetTags);\n    return templateParamsPromise.then((templateParams) => {\n      try {\n        // If html is a promise return the promise\n        // If html is a string turn it into a promise\n        return templateFunction(templateParams);\n      } catch (e) {\n        compilation.errors.push(new Error('Template execution failed: ' + e));\n        return Promise.reject(e);\n      }\n    });\n  }\n\n  /**\n   * Html Post processing\n   *\n   * @param {any} html\n   * The input html\n   * @param {any} assets\n   * @param {{\n       headTags: HtmlTagObject[],\n       bodyTags: HtmlTagObject[]\n     }} assetTags\n   * The asset tags to inject\n   *\n   * @returns {Promise<string>}\n   */\n  function postProcessHtml (html, assets, assetTags) {\n    if (typeof html !== 'string') {\n      return Promise.reject(new Error('Expected html to be a string but got ' + JSON.stringify(html)));\n    }\n    const htmlAfterInjection = options.inject\n      ? injectAssetsIntoHtml(html, assets, assetTags)\n      : html;\n    const htmlAfterMinification = minifyHtml(htmlAfterInjection);\n    return Promise.resolve(htmlAfterMinification);\n  }\n\n  /*\n   * Pushes the content of the given filename to the compilation assets\n   * @param {string} filename\n   * @param {WebpackCompilation} compilation\n   *\n   * @returns {string} file basename\n   */\n  function addFileToAssets (filename, compilation) {\n    filename = path.resolve(compilation.compiler.context, filename);\n    return fsReadFileAsync(filename)\n      .then(source => new webpack.sources.RawSource(source, false))\n      .catch(() => Promise.reject(new Error('HtmlWebpackPlugin: could not load file ' + filename)))\n      .then(rawSource => {\n        const basename = path.basename(filename);\n        compilation.fileDependencies.add(filename);\n        compilation.emitAsset(basename, rawSource);\n        return basename;\n      });\n  }\n\n  /**\n   * Replace [contenthash] in filename\n   *\n   * @see https://survivejs.com/webpack/optimizing/adding-hashes-to-filenames/\n   *\n   * @param {string} filename\n   * @param {string|Buffer} fileContent\n   * @param {WebpackCompilation} compilation\n   * @returns {{ path: string, info: {} }}\n   */\n  function replacePlaceholdersInFilename (filename, fileContent, compilation) {\n    if (/\\[\\\\*([\\w:]+)\\\\*\\]/i.test(filename) === false) {\n      return { path: filename, info: {} };\n    }\n    const hash = compiler.webpack.util.createHash(compilation.outputOptions.hashFunction);\n    hash.update(fileContent);\n    if (compilation.outputOptions.hashSalt) {\n      hash.update(compilation.outputOptions.hashSalt);\n    }\n    const contentHash = hash.digest(compilation.outputOptions.hashDigest).slice(0, compilation.outputOptions.hashDigestLength);\n    return compilation.getPathWithInfo(\n      filename,\n      {\n        contentHash,\n        chunk: {\n          hash: contentHash,\n          contentHash\n        }\n      }\n    );\n  }\n\n  /**\n   * Helper to sort chunks\n   * @param {string[]} entryNames\n   * @param {string|((entryNameA: string, entryNameB: string) => number)} sortMode\n   * @param {WebpackCompilation} compilation\n   */\n  function sortEntryChunks (entryNames, sortMode, compilation) {\n    // Custom function\n    if (typeof sortMode === 'function') {\n      return entryNames.sort(sortMode);\n    }\n    // Check if the given sort mode is a valid chunkSorter sort mode\n    if (typeof chunkSorter[sortMode] !== 'undefined') {\n      return chunkSorter[sortMode](entryNames, compilation, options);\n    }\n    throw new Error('\"' + sortMode + '\" is not a valid chunk sort mode');\n  }\n\n  /**\n   * Return all chunks from the compilation result which match the exclude and include filters\n   * @param {any} chunks\n   * @param {string[]|'all'} includedChunks\n   * @param {string[]} excludedChunks\n   */\n  function filterChunks (chunks, includedChunks, excludedChunks) {\n    return chunks.filter(chunkName => {\n      // Skip if the chunks should be filtered and the given chunk was not added explicity\n      if (Array.isArray(includedChunks) && includedChunks.indexOf(chunkName) === -1) {\n        return false;\n      }\n      // Skip if the chunks should be filtered and the given chunk was excluded explicity\n      if (Array.isArray(excludedChunks) && excludedChunks.indexOf(chunkName) !== -1) {\n        return false;\n      }\n      // Add otherwise\n      return true;\n    });\n  }\n\n  /**\n   * Generate the relative or absolute base url to reference images, css, and javascript files\n   * from within the html file - the publicPath\n   *\n   * @param {WebpackCompilation} compilation\n   * @param {string} childCompilationOutputName\n   * @param {string | 'auto'} customPublicPath\n   * @returns {string}\n   */\n  function getPublicPath (compilation, childCompilationOutputName, customPublicPath) {\n    const compilationHash = compilation.hash;\n\n    /**\n     * @type {string} the configured public path to the asset root\n     * if a path publicPath is set in the current webpack config use it otherwise\n     * fallback to a relative path\n     */\n    const webpackPublicPath = compilation.getAssetPath(compilation.outputOptions.publicPath, { hash: compilationHash });\n\n    // Webpack 5 introduced \"auto\" as default value\n    const isPublicPathDefined = webpackPublicPath !== 'auto';\n\n    let publicPath =\n      // If the html-webpack-plugin options contain a custom public path uset it\n      customPublicPath !== 'auto'\n        ? customPublicPath\n        : (isPublicPathDefined\n          // If a hard coded public path exists use it\n          ? webpackPublicPath\n          // If no public path was set get a relative url path\n          : path.relative(path.resolve(compilation.options.output.path, path.dirname(childCompilationOutputName)), compilation.options.output.path)\n            .split(path.sep).join('/')\n        );\n\n    if (publicPath.length && publicPath.substr(-1, 1) !== '/') {\n      publicPath += '/';\n    }\n\n    return publicPath;\n  }\n\n  /**\n   * The htmlWebpackPluginAssets extracts the asset information of a webpack compilation\n   * for all given entry names\n   * @param {WebpackCompilation} compilation\n   * @param {string[]} entryNames\n   * @param {string | 'auto'} publicPath\n   * @returns {{\n      publicPath: string,\n      js: Array<string>,\n      css: Array<string>,\n      manifest?: string,\n      favicon?: string\n    }}\n   */\n  function htmlWebpackPluginAssets (compilation, entryNames, publicPath) {\n    const compilationHash = compilation.hash;\n    /**\n     * @type {{\n        publicPath: string,\n        js: Array<string>,\n        css: Array<string>,\n        manifest?: string,\n        favicon?: string\n      }}\n     */\n    const assets = {\n      // The public path\n      publicPath,\n      // Will contain all js and mjs files\n      js: [],\n      // Will contain all css files\n      css: [],\n      // Will contain the html5 appcache manifest files if it exists\n      manifest: Object.keys(compilation.assets).find(assetFile => path.extname(assetFile) === '.appcache'),\n      // Favicon\n      favicon: undefined\n    };\n\n    // Append a hash for cache busting\n    if (options.hash && assets.manifest) {\n      assets.manifest = appendHash(assets.manifest, compilationHash);\n    }\n\n    // Extract paths to .js, .mjs and .css files from the current compilation\n    const entryPointPublicPathMap = {};\n    const extensionRegexp = /\\.(css|js|mjs)(\\?|$)/;\n    for (let i = 0; i < entryNames.length; i++) {\n      const entryName = entryNames[i];\n      /** entryPointUnfilteredFiles - also includes hot module update files */\n      const entryPointUnfilteredFiles = compilation.entrypoints.get(entryName).getFiles();\n\n      const entryPointFiles = entryPointUnfilteredFiles.filter((chunkFile) => {\n        // compilation.getAsset was introduced in webpack 4.4.0\n        // once the support pre webpack 4.4.0 is dropped please\n        // remove the following guard:\n        const asset = compilation.getAsset && compilation.getAsset(chunkFile);\n        if (!asset) {\n          return true;\n        }\n        // Prevent hot-module files from being included:\n        const assetMetaInformation = asset.info || {};\n        return !(assetMetaInformation.hotModuleReplacement || assetMetaInformation.development);\n      });\n\n      // Prepend the publicPath and append the hash depending on the\n      // webpack.output.publicPath and hashOptions\n      // E.g. bundle.js -> /bundle.js?hash\n      const entryPointPublicPaths = entryPointFiles\n        .map(chunkFile => {\n          const entryPointPublicPath = publicPath + urlencodePath(chunkFile);\n          return options.hash\n            ? appendHash(entryPointPublicPath, compilationHash)\n            : entryPointPublicPath;\n        });\n\n      entryPointPublicPaths.forEach((entryPointPublicPath) => {\n        const extMatch = extensionRegexp.exec(entryPointPublicPath);\n        // Skip if the public path is not a .css, .mjs or .js file\n        if (!extMatch) {\n          return;\n        }\n        // Skip if this file is already known\n        // (e.g. because of common chunk optimizations)\n        if (entryPointPublicPathMap[entryPointPublicPath]) {\n          return;\n        }\n        entryPointPublicPathMap[entryPointPublicPath] = true;\n        // ext will contain .js or .css, because .mjs recognizes as .js\n        const ext = extMatch[1] === 'mjs' ? 'js' : extMatch[1];\n        assets[ext].push(entryPointPublicPath);\n      });\n    }\n    return assets;\n  }\n\n  /**\n   * Converts a favicon file from disk to a webpack resource\n   * and returns the url to the resource\n   *\n   * @param {string|false} faviconFilePath\n   * @param {WebpackCompilation} compilation\n   * @param {string} publicPath\n   * @returns {Promise<string|undefined>}\n   */\n  function getFaviconPublicPath (faviconFilePath, compilation, publicPath) {\n    if (!faviconFilePath) {\n      return Promise.resolve(undefined);\n    }\n    return addFileToAssets(faviconFilePath, compilation)\n      .then((faviconName) => {\n        const faviconPath = publicPath + faviconName;\n        if (options.hash) {\n          return appendHash(faviconPath, compilation.hash);\n        }\n        return faviconPath;\n      });\n  }\n\n  /**\n   * Generate all tags script for the given file paths\n   * @param {Array<string>} jsAssets\n   * @returns {Array<HtmlTagObject>}\n   */\n  function generatedScriptTags (jsAssets) {\n    return jsAssets.map(scriptAsset => ({\n      tagName: 'script',\n      voidTag: false,\n      meta: { plugin: 'html-webpack-plugin' },\n      attributes: {\n        defer: options.scriptLoading === 'defer',\n        type: options.scriptLoading === 'module' ? 'module' : undefined,\n        src: scriptAsset\n      }\n    }));\n  }\n\n  /**\n   * Generate all style tags for the given file paths\n   * @param {Array<string>} cssAssets\n   * @returns {Array<HtmlTagObject>}\n   */\n  function generateStyleTags (cssAssets) {\n    return cssAssets.map(styleAsset => ({\n      tagName: 'link',\n      voidTag: true,\n      meta: { plugin: 'html-webpack-plugin' },\n      attributes: {\n        href: styleAsset,\n        rel: 'stylesheet'\n      }\n    }));\n  }\n\n  /**\n   * Generate an optional base tag\n   * @param { false\n            | string\n            | {[attributeName: string]: string} // attributes e.g. { href:\"http://example.com/page.html\" target:\"_blank\" }\n            } baseOption\n  * @returns {Array<HtmlTagObject>}\n  */\n  function generateBaseTag (baseOption) {\n    if (baseOption === false) {\n      return [];\n    } else {\n      return [{\n        tagName: 'base',\n        voidTag: true,\n        meta: { plugin: 'html-webpack-plugin' },\n        attributes: (typeof baseOption === 'string') ? {\n          href: baseOption\n        } : baseOption\n      }];\n    }\n  }\n\n  /**\n   * Generate all meta tags for the given meta configuration\n   * @param {false | {\n            [name: string]:\n              false // disabled\n              | string // name content pair e.g. {viewport: 'width=device-width, initial-scale=1, shrink-to-fit=no'}`\n              | {[attributeName: string]: string|boolean} // custom properties e.g. { name:\"viewport\" content:\"width=500, initial-scale=1\" }\n        }} metaOptions\n  * @returns {Array<HtmlTagObject>}\n  */\n  function generatedMetaTags (metaOptions) {\n    if (metaOptions === false) {\n      return [];\n    }\n    // Make tags self-closing in case of xhtml\n    // Turn { \"viewport\" : \"width=500, initial-scale=1\" } into\n    // [{ name:\"viewport\" content:\"width=500, initial-scale=1\" }]\n    const metaTagAttributeObjects = Object.keys(metaOptions)\n      .map((metaName) => {\n        const metaTagContent = metaOptions[metaName];\n        return (typeof metaTagContent === 'string') ? {\n          name: metaName,\n          content: metaTagContent\n        } : metaTagContent;\n      })\n      .filter((attribute) => attribute !== false);\n      // Turn [{ name:\"viewport\" content:\"width=500, initial-scale=1\" }] into\n      // the html-webpack-plugin tag structure\n    return metaTagAttributeObjects.map((metaTagAttributes) => {\n      if (metaTagAttributes === false) {\n        throw new Error('Invalid meta tag');\n      }\n      return {\n        tagName: 'meta',\n        voidTag: true,\n        meta: { plugin: 'html-webpack-plugin' },\n        attributes: metaTagAttributes\n      };\n    });\n  }\n\n  /**\n   * Generate a favicon tag for the given file path\n   * @param {string| undefined} faviconPath\n   * @returns {Array<HtmlTagObject>}\n   */\n  function generateFaviconTags (faviconPath) {\n    if (!faviconPath) {\n      return [];\n    }\n    return [{\n      tagName: 'link',\n      voidTag: true,\n      meta: { plugin: 'html-webpack-plugin' },\n      attributes: {\n        rel: 'icon',\n        href: faviconPath\n      }\n    }];\n  }\n\n  /**\n   * Group assets to head and bottom tags\n   *\n   * @param {{\n      scripts: Array<HtmlTagObject>;\n      styles: Array<HtmlTagObject>;\n      meta: Array<HtmlTagObject>;\n    }} assetTags\n  * @param {\"body\" | \"head\"} scriptTarget\n  * @returns {{\n      headTags: Array<HtmlTagObject>;\n      bodyTags: Array<HtmlTagObject>;\n    }}\n  */\n  function generateAssetGroups (assetTags, scriptTarget) {\n    /** @type {{ headTags: Array<HtmlTagObject>; bodyTags: Array<HtmlTagObject>; }} */\n    const result = {\n      headTags: [\n        ...assetTags.meta,\n        ...assetTags.styles\n      ],\n      bodyTags: []\n    };\n    // Add script tags to head or body depending on\n    // the htmlPluginOptions\n    if (scriptTarget === 'body') {\n      result.bodyTags.push(...assetTags.scripts);\n    } else {\n      // If script loading is blocking add the scripts to the end of the head\n      // If script loading is non-blocking add the scripts infront of the css files\n      const insertPosition = options.scriptLoading === 'blocking' ? result.headTags.length : assetTags.meta.length;\n      result.headTags.splice(insertPosition, 0, ...assetTags.scripts);\n    }\n    return result;\n  }\n\n  /**\n   * Add toString methods for easier rendering\n   * inside the template\n   *\n   * @param {Array<HtmlTagObject>} assetTagGroup\n   * @returns {Array<HtmlTagObject>}\n   */\n  function prepareAssetTagGroupForRendering (assetTagGroup) {\n    const xhtml = options.xhtml;\n    return HtmlTagArray.from(assetTagGroup.map((assetTag) => {\n      const copiedAssetTag = Object.assign({}, assetTag);\n      copiedAssetTag.toString = function () {\n        return htmlTagObjectToString(this, xhtml);\n      };\n      return copiedAssetTag;\n    }));\n  }\n\n  /**\n   * Injects the assets into the given html string\n   *\n   * @param {string} html\n   * The input html\n   * @param {any} assets\n   * @param {{\n       headTags: HtmlTagObject[],\n       bodyTags: HtmlTagObject[]\n     }} assetTags\n   * The asset tags to inject\n   *\n   * @returns {string}\n   */\n  function injectAssetsIntoHtml (html, assets, assetTags) {\n    const htmlRegExp = /(<html[^>]*>)/i;\n    const headRegExp = /(<\\/head\\s*>)/i;\n    const bodyRegExp = /(<\\/body\\s*>)/i;\n    const body = assetTags.bodyTags.map((assetTagObject) => htmlTagObjectToString(assetTagObject, options.xhtml));\n    const head = assetTags.headTags.map((assetTagObject) => htmlTagObjectToString(assetTagObject, options.xhtml));\n\n    if (body.length) {\n      if (bodyRegExp.test(html)) {\n        // Append assets to body element\n        html = html.replace(bodyRegExp, match => body.join('') + match);\n      } else {\n        // Append scripts to the end of the file if no <body> element exists:\n        html += body.join('');\n      }\n    }\n\n    if (head.length) {\n      // Create a head tag if none exists\n      if (!headRegExp.test(html)) {\n        if (!htmlRegExp.test(html)) {\n          html = '<head></head>' + html;\n        } else {\n          html = html.replace(htmlRegExp, match => match + '<head></head>');\n        }\n      }\n\n      // Append assets to head element\n      html = html.replace(headRegExp, match => head.join('') + match);\n    }\n\n    // Inject manifest into the opening html tag\n    if (assets.manifest) {\n      html = html.replace(/(<html[^>]*)(>)/i, (match, start, end) => {\n        // Append the manifest only if no manifest was specified\n        if (/\\smanifest\\s*=/.test(match)) {\n          return match;\n        }\n        return start + ' manifest=\"' + assets.manifest + '\"' + end;\n      });\n    }\n    return html;\n  }\n\n  /**\n   * Appends a cache busting hash to the query string of the url\n   * E.g. http://localhost:8080/ -> http://localhost:8080/?50c9096ba6183fd728eeb065a26ec175\n   * @param {string} url\n   * @param {string} hash\n   */\n  function appendHash (url, hash) {\n    if (!url) {\n      return url;\n    }\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + hash;\n  }\n\n  /**\n   * Encode each path component using `encodeURIComponent` as files can contain characters\n   * which needs special encoding in URLs like `+ `.\n   *\n   * Valid filesystem characters which need to be encoded for urls:\n   *\n   * # pound, % percent, & ampersand, { left curly bracket, } right curly bracket,\n   * \\ back slash, < left angle bracket, > right angle bracket, * asterisk, ? question mark,\n   * blank spaces, $ dollar sign, ! exclamation point, ' single quotes, \" double quotes,\n   * : colon, @ at sign, + plus sign, ` backtick, | pipe, = equal sign\n   *\n   * However the query string must not be encoded:\n   *\n   *  fo:demonstration-path/very fancy+name.js?path=/home?value=abc&value=def#zzz\n   *    ^             ^    ^    ^     ^    ^  ^    ^^    ^     ^   ^     ^   ^\n   *    |             |    |    |     |    |  |    ||    |     |   |     |   |\n   *    encoded       |    |    encoded    |  |    ||    |     |   |     |   |\n   *                 ignored              ignored  ignored     ignored   ignored\n   *\n   * @param {string} filePath\n   */\n  function urlencodePath (filePath) {\n    // People use the filepath in quite unexpected ways.\n    // Try to extract the first querystring of the url:\n    //\n    // some+path/demo.html?value=abc?def\n    //\n    const queryStringStart = filePath.indexOf('?');\n    const urlPath = queryStringStart === -1 ? filePath : filePath.substr(0, queryStringStart);\n    const queryString = filePath.substr(urlPath.length);\n    // Encode all parts except '/' which are not part of the querystring:\n    const encodedUrlPath = urlPath.split('/').map(encodeURIComponent).join('/');\n    return encodedUrlPath + queryString;\n  }\n\n  /**\n   * Helper to return the absolute template path with a fallback loader\n   * @param {string} template\n   * The path to the template e.g. './index.html'\n   * @param {string} context\n   * The webpack base resolution path for relative paths e.g. process.cwd()\n   */\n  function getFullTemplatePath (template, context) {\n    if (template === 'auto') {\n      template = path.resolve(context, 'src/index.ejs');\n      if (!fs.existsSync(template)) {\n        template = path.join(__dirname, 'default_index.ejs');\n      }\n    }\n    // If the template doesn't use a loader use the lodash template loader\n    if (template.indexOf('!') === -1) {\n      template = require.resolve('./lib/loader.js') + '!' + path.resolve(context, template);\n    }\n    // Resolve template path\n    return template.replace(\n      /([!])([^/\\\\][^!?]+|[^/\\\\!?])($|\\?[^!?\\n]+$)/,\n      (match, prefix, filepath, postfix) => prefix + path.resolve(filepath) + postfix);\n  }\n\n  /**\n   * Minify the given string using html-minifier-terser\n   *\n   * As this is a breaking change to html-webpack-plugin 3.x\n   * provide an extended error message to explain how to get back\n   * to the old behaviour\n   *\n   * @param {string} html\n   */\n  function minifyHtml (html) {\n    if (typeof options.minify !== 'object') {\n      return html;\n    }\n    try {\n      return require('html-minifier-terser').minify(html, options.minify);\n    } catch (e) {\n      const isParseError = String(e.message).indexOf('Parse Error') === 0;\n      if (isParseError) {\n        e.message = 'html-webpack-plugin could not minify the generated output.\\n' +\n            'In production mode the html minifcation is enabled by default.\\n' +\n            'If you are not generating a valid html output please disable it manually.\\n' +\n            'You can do so by adding the following setting to your HtmlWebpackPlugin config:\\n|\\n|' +\n            '    minify: false\\n|\\n' +\n            'See https://github.com/jantimon/html-webpack-plugin#options for details.\\n\\n' +\n            'For parser dedicated bugs please create an issue here:\\n' +\n            'https://danielruf.github.io/html-minifier-terser/' +\n          '\\n' + e.message;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Helper to return a sorted unique array of all asset files out of the\n   * asset object\n   */\n  function getAssetFiles (assets) {\n    const files = _.uniq(Object.keys(assets).filter(assetType => assetType !== 'chunks' && assets[assetType]).reduce((files, assetType) => files.concat(assets[assetType]), []));\n    files.sort();\n    return files;\n  }\n}\n\n/**\n * The default for options.templateParameter\n * Generate the template parameters\n *\n * Generate the template parameters for the template function\n * @param {WebpackCompilation} compilation\n * @param {{\n   publicPath: string,\n   js: Array<string>,\n   css: Array<string>,\n   manifest?: string,\n   favicon?: string\n }} assets\n * @param {{\n     headTags: HtmlTagObject[],\n     bodyTags: HtmlTagObject[]\n   }} assetTags\n * @param {ProcessedHtmlWebpackOptions} options\n * @returns {TemplateParameter}\n */\nfunction templateParametersGenerator (compilation, assets, assetTags, options) {\n  return {\n    compilation: compilation,\n    webpackConfig: compilation.options,\n    htmlWebpackPlugin: {\n      tags: assetTags,\n      files: assets,\n      options: options\n    }\n  };\n}\n\n// Statics:\n/**\n * The major version number of this plugin\n */\nHtmlWebpackPlugin.version = 5;\n\n/**\n * A static helper to get the hooks for this plugin\n *\n * Usage: HtmlWebpackPlugin.getHooks(compilation).HOOK_NAME.tapAsync('YourPluginName', () => { ... });\n */\nHtmlWebpackPlugin.getHooks = getHtmlWebpackPluginHooks;\nHtmlWebpackPlugin.createHtmlTagObject = createHtmlTagObject;\n\nmodule.exports = HtmlWebpackPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}