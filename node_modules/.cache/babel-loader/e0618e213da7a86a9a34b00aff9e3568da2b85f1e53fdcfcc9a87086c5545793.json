{"ast":null,"code":"var _jsxFileName = \"/home/insultados/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 5\n}, this));\n\n// лента новостей \n\n$.ajaxSetup({\n  // тип запроса\n  type: \"POST\",\n  data: {},\n  dataType: 'json',\n  xhrFields: {\n    withCredentials: true\n  },\n  crossDomain: true,\n  contentType: 'application/json; charset=utf-8'\n});\nfunction sendJSON(user_data, user_url, req_type) {\n  // запрос на сервер\n  let xhr = new XMLHttpRequest();\n  let url = \"http://127.0.0.1:5000\" + user_url;\n  xhr.open(req_type, url, false);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      console.log(req_type + ' request was received');\n    }\n  };\n  xhr.send(JSON.stringify(user_data));\n  return JSON.parse(xhr.responseText);\n}\nfunction parsePost(post, num) {\n  let post_block = $(`<div id=\"feed_element_content${num}\" class=\"feed_element_content\"></div>`);\n  $(`#feed_element_container${num}`).append(post_block);\n  for (let i = 0; i < post['posts'][num].length; i++) {\n    $(`#feed_element_content${num}`).append($(`<p>${post['posts'][num][i]}</p>`));\n  }\n}\nfunction addToFeed() {\n  let response = sendJSON('', '/api/v1/', 'GET');\n  for (let i = 0; i < response['posts'].length; i++) {\n    $('.feed_container_content').append(`<div id=\"feed_element_container${i}\" class=\"feed_element_container\"><div class=\"feed_element_header\"><p>Новость №${i + 1}</p></div></div>`);\n    parsePost(response, i);\n  }\n}","map":{"version":3,"names":["React","ReactDOM","App","$","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","fileName","_jsxFileName","lineNumber","columnNumber","ajaxSetup","type","data","dataType","xhrFields","withCredentials","crossDomain","contentType","sendJSON","user_data","user_url","req_type","xhr","XMLHttpRequest","url","open","setRequestHeader","onreadystatechange","readyState","status","console","log","send","JSON","stringify","parse","responseText","parsePost","post","num","post_block","append","i","length","addToFeed","response"],"sources":["/home/insultados/my-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport $ from 'jquery'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n// лента новостей \n\n\n\n$.ajaxSetup({ // тип запроса\n    type: \"POST\",\n    data: {},\n    dataType: 'json',\n    xhrFields: {\n        withCredentials: true\n    },\n    crossDomain: true,\n    contentType: 'application/json; charset=utf-8'\n});\n\n\nfunction sendJSON(user_data, user_url, req_type) { // запрос на сервер\n    let xhr = new XMLHttpRequest();\n    let url = \"http://127.0.0.1:5000\" + user_url;\n    xhr.open(req_type, url, false);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            console.log(req_type + ' request was received');\n        }\n    };\n    xhr.send(JSON.stringify(user_data));\n    return JSON.parse(xhr.responseText);\n}\n\n\nfunction parsePost(post, num) {\n    let post_block = $(`<div id=\"feed_element_content${num}\" class=\"feed_element_content\"></div>`);\n    $(`#feed_element_container${num}`).append(post_block);\n    for (let i = 0; i < post['posts'][num].length; i++) {\n        $(`#feed_element_content${num}`).append($(`<p>${post['posts'][num][i]}</p>`));  \n    }\n}\n\n\nfunction addToFeed() {\n    let response = sendJSON('', '/api/v1/', 'GET');\n    for (let i = 0; i < response['posts'].length; i++) {\n        $('.feed_container_content').append(`<div id=\"feed_element_container${i}\" class=\"feed_element_container\"><div class=\"feed_element_header\"><p>Новость №${i+1}</p></div></div>`)\n        parsePost(response, i)\n    }\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,CAAC,MAAM,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,IAAI,GAAGL,QAAQ,CAACM,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACPL,OAAA,CAACH,GAAG;EAAAS,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,QAAG,CACV;;AAED;;AAIAX,CAAC,CAACY,SAAS,CAAC;EAAE;EACVC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,CAAC,CAAC;EACRC,QAAQ,EAAE,MAAM;EAChBC,SAAS,EAAE;IACPC,eAAe,EAAE;EACrB,CAAC;EACDC,WAAW,EAAE,IAAI;EACjBC,WAAW,EAAE;AACjB,CAAC,CAAC;AAGF,SAASC,QAAQA,CAACC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EAAE;EAC/C,IAAIC,GAAG,GAAG,IAAIC,cAAc,EAAE;EAC9B,IAAIC,GAAG,GAAG,uBAAuB,GAAGJ,QAAQ;EAC5CE,GAAG,CAACG,IAAI,CAACJ,QAAQ,EAAEG,GAAG,EAAE,KAAK,CAAC;EAC9BF,GAAG,CAACI,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC;EACxDJ,GAAG,CAACK,kBAAkB,GAAG,YAAY;IACjC,IAAIL,GAAG,CAACM,UAAU,KAAK,CAAC,IAAIN,GAAG,CAACO,MAAM,KAAK,GAAG,EAAE;MAC5CC,OAAO,CAACC,GAAG,CAACV,QAAQ,GAAG,uBAAuB,CAAC;IACnD;EACJ,CAAC;EACDC,GAAG,CAACU,IAAI,CAACC,IAAI,CAACC,SAAS,CAACf,SAAS,CAAC,CAAC;EACnC,OAAOc,IAAI,CAACE,KAAK,CAACb,GAAG,CAACc,YAAY,CAAC;AACvC;AAGA,SAASC,SAASA,CAACC,IAAI,EAAEC,GAAG,EAAE;EAC1B,IAAIC,UAAU,GAAG1C,CAAC,CAAE,gCAA+ByC,GAAI,uCAAsC,CAAC;EAC9FzC,CAAC,CAAE,0BAAyByC,GAAI,EAAC,CAAC,CAACE,MAAM,CAACD,UAAU,CAAC;EACrD,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAAC,OAAO,CAAC,CAACC,GAAG,CAAC,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IAChD5C,CAAC,CAAE,wBAAuByC,GAAI,EAAC,CAAC,CAACE,MAAM,CAAC3C,CAAC,CAAE,MAAKwC,IAAI,CAAC,OAAO,CAAC,CAACC,GAAG,CAAC,CAACG,CAAC,CAAE,MAAK,CAAC,CAAC;EACjF;AACJ;AAGA,SAASE,SAASA,CAAA,EAAG;EACjB,IAAIC,QAAQ,GAAG3B,QAAQ,CAAC,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC;EAC9C,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,QAAQ,CAAC,OAAO,CAAC,CAACF,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/C5C,CAAC,CAAC,yBAAyB,CAAC,CAAC2C,MAAM,CAAE,kCAAiCC,CAAE,iFAAgFA,CAAC,GAAC,CAAE,kBAAiB,CAAC;IAC9KL,SAAS,CAACQ,QAAQ,EAAEH,CAAC,CAAC;EAC1B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}